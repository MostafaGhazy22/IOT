
iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003608  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800379c  0800379c  0000479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e8  080038e8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038f0  080038f0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f0  080038f0  000048f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038f4  080038f4  000048f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080038f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000068  08003960  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08003960  00005470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a55  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4a  00000000  00000000  0000eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00010a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000626  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b20  00000000  00000000  00011896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b77e  00000000  00000000  000283b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086dab  00000000  00000000  00033b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba8df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002590  00000000  00000000  000ba924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000bceb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003784 	.word	0x08003784

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003784 	.word	0x08003784

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ESP_Send_AT_Command>:
#include "ECU_ESP_interface.h"
#include "usart.h" // Include STM32 HAL for UART
#include "string.h"

void ESP_Send_AT_Command(const char *command) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)command,(uint16_t) strlen(command), HAL_MAX_DELAY);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff fe79 	bl	80001d4 <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	4803      	ldr	r0, [pc, #12]	@ (80004fc <ESP_Send_AT_Command+0x28>)
 80004ee:	f001 fc89 	bl	8001e04 <HAL_UART_Transmit>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200002d8 	.word	0x200002d8

08000500 <ESP_Init>:

void ESP_Init() {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    // Initialize ESP by sending basic AT commands
    ESP_Send_AT_Command("AT+RST\r\n");
 8000504:	480b      	ldr	r0, [pc, #44]	@ (8000534 <ESP_Init+0x34>)
 8000506:	f7ff ffe5 	bl	80004d4 <ESP_Send_AT_Command>
    HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050e:	f000 fc6b 	bl	8000de8 <HAL_Delay>

    // Set ESP32 to station mode
    ESP_Send_AT_Command("AT+CWMODE=1\r\n");
 8000512:	4809      	ldr	r0, [pc, #36]	@ (8000538 <ESP_Init+0x38>)
 8000514:	f7ff ffde 	bl	80004d4 <ESP_Send_AT_Command>
    HAL_Delay(1000);
 8000518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800051c:	f000 fc64 	bl	8000de8 <HAL_Delay>

    // Connect to WiFi
    ESP_Send_AT_Command("AT+CWJAP_CUR=\"Gold\",\"AmalGold97\"\r\n");
 8000520:	4806      	ldr	r0, [pc, #24]	@ (800053c <ESP_Init+0x3c>)
 8000522:	f7ff ffd7 	bl	80004d4 <ESP_Send_AT_Command>
    HAL_Delay(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052a:	f000 fc5d 	bl	8000de8 <HAL_Delay>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	0800379c 	.word	0x0800379c
 8000538:	080037a8 	.word	0x080037a8
 800053c:	080037b8 	.word	0x080037b8

08000540 <ESP_Get_LED_Status>:

void ESP_Get_LED_Status() {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    // Start HTTP GET request to the server
    ESP_Send_AT_Command("AT+CIPSTART=\"TCP\",\"185.27.134.103\",80\r\n");
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <ESP_Get_LED_Status+0x38>)
 8000546:	f7ff ffc5 	bl	80004d4 <ESP_Send_AT_Command>
    HAL_Delay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054e:	f000 fc4b 	bl	8000de8 <HAL_Delay>

    // Send GET request
    ESP_Send_AT_Command("AT+CIPSEND=82\r\n");  // Adjust 66 to the length of your GET request
 8000552:	480a      	ldr	r0, [pc, #40]	@ (800057c <ESP_Get_LED_Status+0x3c>)
 8000554:	f7ff ffbe 	bl	80004d4 <ESP_Send_AT_Command>
    HAL_Delay(1000);
 8000558:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800055c:	f000 fc44 	bl	8000de8 <HAL_Delay>

    ESP_Send_AT_Command("GET /led-status.txt HTTP/1.1\r\nHost: iotprog.lovestoblog.com\r\nConnection: close\r\n\r\n");
 8000560:	4807      	ldr	r0, [pc, #28]	@ (8000580 <ESP_Get_LED_Status+0x40>)
 8000562:	f7ff ffb7 	bl	80004d4 <ESP_Send_AT_Command>
    printf("GET /led-status.txt HTTP/1.1\r\nHost: iotprog.lovestoblog.com\r\nConnection: close\r\n\r\n");
 8000566:	4807      	ldr	r0, [pc, #28]	@ (8000584 <ESP_Get_LED_Status+0x44>)
 8000568:	f002 fd6a 	bl	8003040 <puts>
    HAL_Delay(500);
 800056c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000570:	f000 fc3a 	bl	8000de8 <HAL_Delay>

    // Receive response and process in the main loop
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	080037dc 	.word	0x080037dc
 800057c:	08003804 	.word	0x08003804
 8000580:	08003814 	.word	0x08003814
 8000584:	08003868 	.word	0x08003868

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a10      	ldr	r2, [pc, #64]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_GPIO_Init+0x98>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	480b      	ldr	r0, [pc, #44]	@ (8000624 <MX_GPIO_Init+0x9c>)
 80005f8:	f000 ff42 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <MX_GPIO_Init+0x9c>)
 8000614:	f000 fdb0 	bl	8001178 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000634:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d013      	beq.n	8000668 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000640:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000644:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000648:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000650:	e000      	b.n	8000654 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000652:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000654:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800065e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fb41 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f853 	bl	800072c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f7ff ff7f 	bl	8000588 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068a:	f000 fa63 	bl	8000b54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800068e:	f000 fa37 	bl	8000b00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	ESP_Init();
 8000692:	f7ff ff35 	bl	8000500 <ESP_Init>
	UART_Init();
 8000696:	f000 f9c5 	bl	8000a24 <UART_Init>

	printf("System starts ... \r\n");
 800069a:	4820      	ldr	r0, [pc, #128]	@ (800071c <main+0xa4>)
 800069c:	f002 fcd0 	bl	8003040 <puts>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* Check for periodic request */
		if (HAL_GetTick() - lastRequestTime >= REQUEST_INTERVAL) {
 80006a0:	f000 fb96 	bl	8000dd0 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <main+0xa8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006b0:	d306      	bcc.n	80006c0 <main+0x48>
			lastRequestTime = HAL_GetTick(); // Update last request time
 80006b2:	f000 fb8d 	bl	8000dd0 <HAL_GetTick>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a19      	ldr	r2, [pc, #100]	@ (8000720 <main+0xa8>)
 80006ba:	6013      	str	r3, [r2, #0]
			ESP_Get_LED_Status(); // Request LED status from the server
 80006bc:	f7ff ff40 	bl	8000540 <ESP_Get_LED_Status>
		}

		// Check for new data
		uint16_t bytesReceived = UART_GetData(receivedData, RX_BUFFER_SIZE);
 80006c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c4:	4817      	ldr	r0, [pc, #92]	@ (8000724 <main+0xac>)
 80006c6:	f000 f9ed 	bl	8000aa4 <UART_GetData>
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
		if (bytesReceived > 0) {
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e5      	beq.n	80006a0 <main+0x28>
			// Ensure the received data is null-terminated (optional)
			receivedData[bytesReceived] = '\0';
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <main+0xac>)
 80006d8:	2100      	movs	r1, #0
 80006da:	54d1      	strb	r1, [r2, r3]

			// Parse the data to check for "1" or "0"
			if (strstr((char*)receivedData, "1") != NULL) {
 80006dc:	2131      	movs	r1, #49	@ 0x31
 80006de:	4811      	ldr	r0, [pc, #68]	@ (8000724 <main+0xac>)
 80006e0:	f002 fd96 	bl	8003210 <strchr>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <main+0x7e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  // Turn LED ON
 80006ea:	2201      	movs	r2, #1
 80006ec:	2101      	movs	r1, #1
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <main+0xb0>)
 80006f0:	f000 fec6 	bl	8001480 <HAL_GPIO_WritePin>
 80006f4:	e00b      	b.n	800070e <main+0x96>
			} else if (strstr((char*)receivedData, "0") != NULL) {
 80006f6:	2130      	movs	r1, #48	@ 0x30
 80006f8:	480a      	ldr	r0, [pc, #40]	@ (8000724 <main+0xac>)
 80006fa:	f002 fd89 	bl	8003210 <strchr>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <main+0x96>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Turn LED OFF
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	4807      	ldr	r0, [pc, #28]	@ (8000728 <main+0xb0>)
 800070a:	f000 feb9 	bl	8001480 <HAL_GPIO_WritePin>
			}

			// Optionally clear the buffer after processing
			memset(receivedData, 0, RX_BUFFER_SIZE);
 800070e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000712:	2100      	movs	r1, #0
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <main+0xac>)
 8000716:	f002 fd73 	bl	8003200 <memset>
	{
 800071a:	e7c1      	b.n	80006a0 <main+0x28>
 800071c:	080038bc 	.word	0x080038bc
 8000720:	20000184 	.word	0x20000184
 8000724:	20000084 	.word	0x20000084
 8000728:	40020000 	.word	0x40020000

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fd60 	bl	8003200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <SystemClock_Config+0xb4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <SystemClock_Config+0xb4>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <SystemClock_Config+0xb4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <SystemClock_Config+0xb8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000778:	4a1a      	ldr	r2, [pc, #104]	@ (80007e4 <SystemClock_Config+0xb8>)
 800077a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <SystemClock_Config+0xb8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fe88 	bl	80014b4 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007aa:	f000 f839 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007b6:	2380      	movs	r3, #128	@ 0x80
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f8eb 	bl	80019a4 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d4:	f000 f824 	bl	8000820 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	@ 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e009      	b.n	800080e <_write+0x26>
    ITM_SendChar(*ptr++);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff10 	bl	8000628 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbf1      	blt.n	80007fa <_write+0x12>
  }
  return len;
 8000816:	687b      	ldr	r3, [r7, #4]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 fa69 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <USART2_IRQHandler+0x10>)
 80008e2:	f001 fb3f 	bl	8001f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200002d8 	.word	0x200002d8

080008f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e00a      	b.n	8000918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000902:	f3af 8000 	nop.w
 8000906:	4601      	mov	r1, r0
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60ba      	str	r2, [r7, #8]
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf0      	blt.n	8000902 <_read+0x12>
  }

  return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_close>:
  }
  return len;
}

int _close(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000952:	605a      	str	r2, [r3, #4]
  return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_isatty>:

int _isatty(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	@ (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fc78 	bl	80032b8 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20010000 	.word	0x20010000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000188 	.word	0x20000188
 80009fc:	20000470 	.word	0x20000470

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <UART_Init>:
volatile uint16_t writeIndex = 0;  // Index to track where to write the next byte

extern UART_HandleTypeDef huart2;  // Make sure to declare this as extern, initialized in another file

/* Initialize UART receive with interrupt */
void UART_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	// Start receiving data using interrupt, byte by byte
	HAL_UART_Receive_IT(&huart2, &rxBuffer[writeIndex], 1);
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <UART_Init+0x20>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <UART_Init+0x24>)
 8000a32:	4413      	add	r3, r2
 8000a34:	2201      	movs	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <UART_Init+0x28>)
 8000a3a:	f001 fa6e 	bl	8001f1a <HAL_UART_Receive_IT>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000028c 	.word	0x2000028c
 8000a48:	2000018c 	.word	0x2000018c
 8000a4c:	200002d8 	.word	0x200002d8

08000a50 <HAL_UART_RxCpltCallback>:

/* Callback function for UART reception complete */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <HAL_UART_RxCpltCallback+0x48>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d116      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0x40>
		// Move to the next index in the buffer
		writeIndex = (writeIndex + 1) % RX_BUFFER_SIZE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_UART_RxCpltCallback+0x4c>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3301      	adds	r3, #1
 8000a6a:	425a      	negs	r2, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	bf58      	it	pl
 8000a72:	4253      	negpl	r3, r2
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_UART_RxCpltCallback+0x4c>)
 8000a78:	801a      	strh	r2, [r3, #0]

		// Re-initiate the UART receive interrupt for the next byte
		HAL_UART_Receive_IT(huart, &rxBuffer[writeIndex], 1);
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_UART_RxCpltCallback+0x4c>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x50>)
 8000a84:	4413      	add	r3, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f001 fa45 	bl	8001f1a <HAL_UART_Receive_IT>
	}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	2000028c 	.word	0x2000028c
 8000aa0:	2000018c 	.word	0x2000018c

08000aa4 <UART_GetData>:

/* Function to retrieve received data */
uint16_t UART_GetData(uint8_t* dataArray, uint16_t maxSize) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
	uint16_t bytesAvailable = writeIndex;  // Get the number of bytes written to buffer
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <UART_GetData+0x54>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	81bb      	strh	r3, [r7, #12]
	uint16_t count = (bytesAvailable > maxSize) ? maxSize : bytesAvailable;
 8000ab6:	89ba      	ldrh	r2, [r7, #12]
 8000ab8:	887b      	ldrh	r3, [r7, #2]
 8000aba:	4293      	cmp	r3, r2
 8000abc:	bf28      	it	cs
 8000abe:	4613      	movcs	r3, r2
 8000ac0:	817b      	strh	r3, [r7, #10]

	// Copy the data from the buffer into the passed array
	for (uint16_t i = 0; i < count; i++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	81fb      	strh	r3, [r7, #14]
 8000ac6:	e009      	b.n	8000adc <UART_GetData+0x38>
		dataArray[i] = rxBuffer[i];
 8000ac8:	89fa      	ldrh	r2, [r7, #14]
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	440b      	add	r3, r1
 8000ad0:	490a      	ldr	r1, [pc, #40]	@ (8000afc <UART_GetData+0x58>)
 8000ad2:	5c8a      	ldrb	r2, [r1, r2]
 8000ad4:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < count; i++) {
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	81fb      	strh	r3, [r7, #14]
 8000adc:	89fa      	ldrh	r2, [r7, #14]
 8000ade:	897b      	ldrh	r3, [r7, #10]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f1      	bcc.n	8000ac8 <UART_GetData+0x24>
	}

	// Reset the write index after the data is copied
	writeIndex = 0;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <UART_GetData+0x54>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]

	return count;  // Return the number of bytes copied
 8000aea:	897b      	ldrh	r3, [r7, #10]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	2000028c 	.word	0x2000028c
 8000afc:	2000018c 	.word	0x2000018c

08000b00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f001 f914 	bl	8001d64 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f7ff fe6d 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000290 	.word	0x20000290
 8000b50:	40011000 	.word	0x40011000

08000b54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f001 f8ea 	bl	8001d64 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f7ff fe43 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002d8 	.word	0x200002d8
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	@ 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	@ (8000ca0 <HAL_UART_MspInit+0xf8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12d      	bne.n	8000c26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a34      	ldr	r2, [pc, #208]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c14:	2307      	movs	r3, #7
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <HAL_UART_MspInit+0x100>)
 8000c20:	f000 faaa 	bl	8001178 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c24:	e038      	b.n	8000c98 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a20      	ldr	r2, [pc, #128]	@ (8000cac <HAL_UART_MspInit+0x104>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d133      	bne.n	8000c98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <HAL_UART_MspInit+0x100>)
 8000c84:	f000 fa78 	bl	8001178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2026      	movs	r0, #38	@ 0x26
 8000c8e:	f000 f9aa 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c92:	2026      	movs	r0, #38	@ 0x26
 8000c94:	f000 f9c3 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40004400 	.word	0x40004400

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb4:	f7ff fea4 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f002 faf1 	bl	80032c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fcc9 	bl	8000678 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cf4:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 8000cf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cfc:	20000470 	.word	0x20000470

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fd78 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000320 	.word	0x20000320

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000320 	.word	0x20000320

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff feb6 	bl	8000dd0 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d008      	beq.n	8001084 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2280      	movs	r2, #128	@ 0x80
 8001076:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e052      	b.n	800112a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0216 	bic.w	r2, r2, #22
 8001092:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <HAL_DMA_Abort+0x62>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0208 	bic.w	r2, r2, #8
 80010c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d4:	e013      	b.n	80010fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010d6:	f7ff fe7b 	bl	8000dd0 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d90c      	bls.n	80010fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2220      	movs	r2, #32
 80010e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e015      	b.n	800112a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e4      	bne.n	80010d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001110:	223f      	movs	r2, #63	@ 0x3f
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d004      	beq.n	8001150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00c      	b.n	800116a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2205      	movs	r2, #5
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	e159      	b.n	8001448 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8148 	bne.w	8001442 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d005      	beq.n	80011ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d130      	bne.n	800122c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 0201 	and.w	r2, r3, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b03      	cmp	r3, #3
 8001236:	d017      	beq.n	8001268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d123      	bne.n	80012bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0203 	and.w	r2, r3, #3
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a2 	beq.w	8001442 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <HAL_GPIO_Init+0x2e8>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	4a56      	ldr	r2, [pc, #344]	@ (8001460 <HAL_GPIO_Init+0x2e8>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130c:	6453      	str	r3, [r2, #68]	@ 0x44
 800130e:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <HAL_GPIO_Init+0x2e8>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131a:	4a52      	ldr	r2, [pc, #328]	@ (8001464 <HAL_GPIO_Init+0x2ec>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a49      	ldr	r2, [pc, #292]	@ (8001468 <HAL_GPIO_Init+0x2f0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x202>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a48      	ldr	r2, [pc, #288]	@ (800146c <HAL_GPIO_Init+0x2f4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x1fe>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a47      	ldr	r2, [pc, #284]	@ (8001470 <HAL_GPIO_Init+0x2f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a46      	ldr	r2, [pc, #280]	@ (8001474 <HAL_GPIO_Init+0x2fc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x1f6>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a45      	ldr	r2, [pc, #276]	@ (8001478 <HAL_GPIO_Init+0x300>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x1f2>
 8001366:	2304      	movs	r3, #4
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x204>
 800136a:	2307      	movs	r3, #7
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x204>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x204>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x204>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x204>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	@ (8001464 <HAL_GPIO_Init+0x2ec>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b38      	ldr	r3, [pc, #224]	@ (800147c <HAL_GPIO_Init+0x304>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a2f      	ldr	r2, [pc, #188]	@ (800147c <HAL_GPIO_Init+0x304>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <HAL_GPIO_Init+0x304>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a24      	ldr	r2, [pc, #144]	@ (800147c <HAL_GPIO_Init+0x304>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <HAL_GPIO_Init+0x304>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1a      	ldr	r2, [pc, #104]	@ (800147c <HAL_GPIO_Init+0x304>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_GPIO_Init+0x304>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <HAL_GPIO_Init+0x304>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f aea2 	bls.w	8001194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	@ 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e267      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014d2:	4b88      	ldr	r3, [pc, #544]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b85      	ldr	r3, [pc, #532]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b82      	ldr	r3, [pc, #520]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b7e      	ldr	r3, [pc, #504]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e242      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b76      	ldr	r3, [pc, #472]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b70      	ldr	r3, [pc, #448]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6f      	ldr	r2, [pc, #444]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6d      	ldr	r3, [pc, #436]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6c      	ldr	r2, [pc, #432]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b66      	ldr	r3, [pc, #408]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a65      	ldr	r2, [pc, #404]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fc30 	bl	8000dd0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fc2c 	bl	8000dd0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e207      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5b      	ldr	r3, [pc, #364]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fc1c 	bl	8000dd0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc18 	bl	8000dd0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f3      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b51      	ldr	r3, [pc, #324]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ca:	4b4a      	ldr	r3, [pc, #296]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b47      	ldr	r3, [pc, #284]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b44      	ldr	r3, [pc, #272]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4937      	ldr	r1, [pc, #220]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fbd1 	bl	8000dd0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fbcd 	bl	8000dd0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a8      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4925      	ldr	r1, [pc, #148]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fbb0 	bl	8000dd0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fbac 	bl	8000dd0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e187      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_RCC_OscConfig+0x248>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb90 	bl	8000dd0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb8c 	bl	8000dd0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e167      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_RCC_OscConfig+0x248>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fb79 	bl	8000dd0 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fb75 	bl	8000dd0 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d907      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e150      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470000 	.word	0x42470000
 80016fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ea      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b81      	ldr	r3, [pc, #516]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b7d      	ldr	r3, [pc, #500]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a7c      	ldr	r2, [pc, #496]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b7a      	ldr	r3, [pc, #488]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b74      	ldr	r3, [pc, #464]	@ (8001928 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	@ (8001928 <HAL_RCC_OscConfig+0x474>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fb35 	bl	8000dd0 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fb31 	bl	8000dd0 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e10c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b6a      	ldr	r3, [pc, #424]	@ (8001928 <HAL_RCC_OscConfig+0x474>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x2ea>
 8001790:	4b64      	ldr	r3, [pc, #400]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a63      	ldr	r2, [pc, #396]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x30c>
 80017a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017c0:	4b58      	ldr	r3, [pc, #352]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a57      	ldr	r2, [pc, #348]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80017cc:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a54      	ldr	r2, [pc, #336]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff faf6 	bl	8000dd0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff faf2 	bl	8000dd0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b49      	ldr	r3, [pc, #292]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x334>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fae0 	bl	8000dd0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fadc 	bl	8000dd0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0b5      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	4a38      	ldr	r2, [pc, #224]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a1 	beq.w	8001994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001852:	4b34      	ldr	r3, [pc, #208]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d05c      	beq.n	8001918 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d141      	bne.n	80018ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	@ (800192c <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fab0 	bl	8000dd0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff faac 	bl	8000dd0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	491b      	ldr	r1, [pc, #108]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x478>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa85 	bl	8000dd0 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff fa81 	bl	8000dd0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e05c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x416>
 80018e8:	e054      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa6e 	bl	8000dd0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fa6a 	bl	8000dd0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e038      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	@ (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	@ (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff f99c 	bl	8000dd0 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f998 	bl	8000dd0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f8fc 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	080038d0 	.word	0x080038d0
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b090      	sub	sp, #64	@ 0x40
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80a1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e09b      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ba8:	e09b      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bae:	e098      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d028      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bdc:	fb03 f201 	mul.w	r2, r3, r1
 8001be0:	2300      	movs	r3, #0
 8001be2:	fb00 f303 	mul.w	r3, r0, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	4a43      	ldr	r2, [pc, #268]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bea:	fba0 1202 	umull	r1, r2, r0, r2
 8001bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	61fa      	str	r2, [r7, #28]
 8001c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c0a:	f7fe faeb 	bl	80001e4 <__aeabi_uldivmod>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4613      	mov	r3, r2
 8001c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c16:	e053      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	617a      	str	r2, [r7, #20]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c2a:	f04f 0b00 	mov.w	fp, #0
 8001c2e:	4652      	mov	r2, sl
 8001c30:	465b      	mov	r3, fp
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0159      	lsls	r1, r3, #5
 8001c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c40:	0150      	lsls	r0, r2, #5
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ebb2 080a 	subs.w	r8, r2, sl
 8001c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c62:	ebb2 0408 	subs.w	r4, r2, r8
 8001c66:	eb63 0509 	sbc.w	r5, r3, r9
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	00eb      	lsls	r3, r5, #3
 8001c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c78:	00e2      	lsls	r2, r4, #3
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	eb14 030a 	adds.w	r3, r4, sl
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	eb45 030b 	adc.w	r3, r5, fp
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001caa:	2200      	movs	r2, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb4:	f7fe fa96 	bl	80001e4 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3740      	adds	r7, #64	@ 0x40
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	017d7840 	.word	0x017d7840

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	080038e0 	.word	0x080038e0

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	@ (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	080038e0 	.word	0x080038e0

08001d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e042      	b.n	8001dfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe ff0c 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	@ 0x24
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fdbd 	bl	8002928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d175      	bne.n	8001f10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_UART_Transmit+0x2c>
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e06e      	b.n	8001f12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2221      	movs	r2, #33	@ 0x21
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e42:	f7fe ffc5 	bl	8000dd0 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5c:	d108      	bne.n	8001e70 <HAL_UART_Transmit+0x6c>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d104      	bne.n	8001e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	e003      	b.n	8001e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e78:	e02e      	b.n	8001ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2200      	movs	r2, #0
 8001e82:	2180      	movs	r1, #128	@ 0x80
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fb1f 	bl	80024c8 <UART_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03a      	b.n	8001f12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10b      	bne.n	8001eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	e007      	b.n	8001eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1cb      	bne.n	8001e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2140      	movs	r1, #64	@ 0x40
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 faeb 	bl	80024c8 <UART_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e006      	b.n	8001f12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e000      	b.n	8001f12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
  }
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d112      	bne.n	8001f5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_UART_Receive_IT+0x26>
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e00b      	b.n	8001f5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fb12 	bl	800257a <UART_Start_Receive_IT>
 8001f56:	4603      	mov	r3, r0
 8001f58:	e000      	b.n	8001f5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
  }
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0ba      	sub	sp, #232	@ 0xe8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_UART_IRQHandler+0x66>
 8001fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fbf2 	bl	80027ac <UART_Receive_IT>
      return;
 8001fc8:	e25b      	b.n	8002482 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80de 	beq.w	8002190 <HAL_UART_IRQHandler+0x22c>
 8001fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80d1 	beq.w	8002190 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_UART_IRQHandler+0xae>
 8001ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_UART_IRQHandler+0xd2>
 800201e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f043 0202 	orr.w	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_UART_IRQHandler+0xf6>
 8002042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f043 0204 	orr.w	r2, r3, #4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800205a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d011      	beq.n	800208a <HAL_UART_IRQHandler+0x126>
 8002066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f043 0208 	orr.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 81f2 	beq.w	8002478 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_UART_IRQHandler+0x14e>
 80020a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fb7d 	bl	80027ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020bc:	2b40      	cmp	r3, #64	@ 0x40
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_UART_IRQHandler+0x17a>
 80020d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04f      	beq.n	800217e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fa85 	bl	80025ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ee:	2b40      	cmp	r3, #64	@ 0x40
 80020f0:	d141      	bne.n	8002176 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3314      	adds	r3, #20
 80020f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002100:	e853 3f00 	ldrex	r3, [r3]
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800210c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3314      	adds	r3, #20
 800211a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800211e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800212a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1d9      	bne.n	80020f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d013      	beq.n	800216e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	4a7e      	ldr	r2, [pc, #504]	@ (8002344 <HAL_UART_IRQHandler+0x3e0>)
 800214c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ffed 	bl	8001132 <HAL_DMA_Abort_IT>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002168:	4610      	mov	r0, r2
 800216a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800216c:	e00e      	b.n	800218c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f994 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	e00a      	b.n	800218c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f990 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217c:	e006      	b.n	800218c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f98c 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800218a:	e175      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218c:	bf00      	nop
    return;
 800218e:	e173      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 814f 	bne.w	8002438 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800219a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8148 	beq.w	8002438 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8141 	beq.w	8002438 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d6:	2b40      	cmp	r3, #64	@ 0x40
 80021d8:	f040 80b6 	bne.w	8002348 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8145 	beq.w	800247c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f080 813e 	bcs.w	800247c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002206:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002212:	f000 8088 	beq.w	8002326 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002224:	e853 3f00 	ldrex	r3, [r3]
 8002228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800222c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002242:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800224e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002252:	e841 2300 	strex	r3, r2, [r1]
 8002256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800225a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1d9      	bne.n	8002216 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3314      	adds	r3, #20
 8002282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002286:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800228a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800228e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e1      	bne.n	8002262 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3314      	adds	r3, #20
 80022be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80022d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e3      	bne.n	800229e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80022f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022f6:	f023 0310 	bic.w	r3, r3, #16
 80022fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002308:	65ba      	str	r2, [r7, #88]	@ 0x58
 800230a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800230e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002310:	e841 2300 	strex	r3, r2, [r1]
 8002314:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e3      	bne.n	80022e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fe96 	bl	8001052 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002334:	b29b      	uxth	r3, r3
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	b29b      	uxth	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f8b7 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002342:	e09b      	b.n	800247c <HAL_UART_IRQHandler+0x518>
 8002344:	080026b5 	.word	0x080026b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002350:	b29b      	uxth	r3, r3
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 808e 	beq.w	8002480 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8089 	beq.w	8002480 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800237e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002392:	647a      	str	r2, [r7, #68]	@ 0x44
 8002394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e3      	bne.n	800236e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3314      	adds	r3, #20
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	623b      	str	r3, [r7, #32]
   return(result);
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3314      	adds	r3, #20
 80023c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80023ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d2:	e841 2300 	strex	r3, r2, [r1]
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e3      	bne.n	80023a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	330c      	adds	r3, #12
 80023f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	e853 3f00 	ldrex	r3, [r3]
 80023fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0310 	bic.w	r3, r3, #16
 8002402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	330c      	adds	r3, #12
 800240c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002410:	61fa      	str	r2, [r7, #28]
 8002412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	e841 2300 	strex	r3, r2, [r1]
 800241c:	617b      	str	r3, [r7, #20]
   return(result);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e3      	bne.n	80023ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800242a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800242e:	4619      	mov	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f83d 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002436:	e023      	b.n	8002480 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_UART_IRQHandler+0x4f4>
 8002444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f943 	bl	80026dc <UART_Transmit_IT>
    return;
 8002456:	e014      	b.n	8002482 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <HAL_UART_IRQHandler+0x51e>
 8002464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f983 	bl	800277c <UART_EndTransmit_IT>
    return;
 8002476:	e004      	b.n	8002482 <HAL_UART_IRQHandler+0x51e>
    return;
 8002478:	bf00      	nop
 800247a:	e002      	b.n	8002482 <HAL_UART_IRQHandler+0x51e>
      return;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <HAL_UART_IRQHandler+0x51e>
      return;
 8002480:	bf00      	nop
  }
}
 8002482:	37e8      	adds	r7, #232	@ 0xe8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d8:	e03b      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d037      	beq.n	8002552 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7fe fc75 	bl	8000dd0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e03a      	b.n	8002572 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d023      	beq.n	8002552 <UART_WaitOnFlagUntilTimeout+0x8a>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b80      	cmp	r3, #128	@ 0x80
 800250e:	d020      	beq.n	8002552 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b40      	cmp	r3, #64	@ 0x40
 8002514:	d01d      	beq.n	8002552 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b08      	cmp	r3, #8
 8002522:	d116      	bne.n	8002552 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f857 	bl	80025ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2208      	movs	r2, #8
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4013      	ands	r3, r2
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d0b4      	beq.n	80024da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	4613      	mov	r3, r2
 8002586:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2222      	movs	r2, #34	@ 0x22
 80025a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b095      	sub	sp, #84	@ 0x54
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800260c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002616:	643a      	str	r2, [r7, #64]	@ 0x40
 8002618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800261c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e5      	bne.n	80025f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	61fb      	str	r3, [r7, #28]
   return(result);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3314      	adds	r3, #20
 8002648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800264a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e5      	bne.n	800262a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	2b01      	cmp	r3, #1
 8002664:	d119      	bne.n	800269a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	60bb      	str	r3, [r7, #8]
   return(result);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f023 0310 	bic.w	r3, r3, #16
 800267c:	647b      	str	r3, [r7, #68]	@ 0x44
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002686:	61ba      	str	r2, [r7, #24]
 8002688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	6979      	ldr	r1, [r7, #20]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	613b      	str	r3, [r7, #16]
   return(result);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e5      	bne.n	8002666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026a8:	bf00      	nop
 80026aa:	3754      	adds	r7, #84	@ 0x54
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fee4 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b21      	cmp	r3, #33	@ 0x21
 80026ee:	d13e      	bne.n	800276e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f8:	d114      	bne.n	8002724 <UART_Transmit_IT+0x48>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d110      	bne.n	8002724 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002716:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	1c9a      	adds	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	e008      	b.n	8002736 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6211      	str	r1, [r2, #32]
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29b      	uxth	r3, r3
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4619      	mov	r1, r3
 8002744:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002758:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002768:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002792:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fe73 	bl	8002488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	@ 0x30
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b22      	cmp	r3, #34	@ 0x22
 80027be:	f040 80ae 	bne.w	800291e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	d117      	bne.n	80027fc <UART_Receive_IT+0x50>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d113      	bne.n	80027fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	1c9a      	adds	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80027fa:	e026      	b.n	800284a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280e:	d007      	beq.n	8002820 <UART_Receive_IT+0x74>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <UART_Receive_IT+0x82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e008      	b.n	8002840 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800283a:	b2da      	uxtb	r2, r3
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29b      	uxth	r3, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4619      	mov	r1, r3
 8002858:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800285a:	2b00      	cmp	r3, #0
 800285c:	d15d      	bne.n	800291a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0220 	bic.w	r2, r2, #32
 800286c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800287c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d135      	bne.n	8002910 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f023 0310 	bic.w	r3, r3, #16
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ca:	623a      	str	r2, [r7, #32]
 80028cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	69f9      	ldr	r1, [r7, #28]
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e5      	bne.n	80028aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d10a      	bne.n	8002902 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fdd1 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
 800290e:	e002      	b.n	8002916 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe f89d 	bl	8000a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e002      	b.n	8002920 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3730      	adds	r7, #48	@ 0x30
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b0c0      	sub	sp, #256	@ 0x100
 800292e:	af00      	add	r7, sp, #0
 8002930:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	68d9      	ldr	r1, [r3, #12]
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	ea40 0301 	orr.w	r3, r0, r1
 8002950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	431a      	orrs	r2, r3
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	431a      	orrs	r2, r3
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002980:	f021 010c 	bic.w	r1, r1, #12
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800298e:	430b      	orrs	r3, r1
 8002990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a2:	6999      	ldr	r1, [r3, #24]
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	ea40 0301 	orr.w	r3, r0, r1
 80029ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d005      	beq.n	80029c8 <UART_SetConfig+0xa0>
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf8 <UART_SetConfig+0x2d0>)
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d104      	bne.n	80029d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c8:	f7ff f9b8 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80029cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029d0:	e003      	b.n	80029da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029d2:	f7ff f99f 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80029d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e4:	f040 810c 	bne.w	8002c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	1891      	adds	r1, r2, r2
 8002a00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a02:	415b      	adcs	r3, r3
 8002a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	eb12 0801 	adds.w	r8, r2, r1
 8002a10:	4629      	mov	r1, r5
 8002a12:	eb43 0901 	adc.w	r9, r3, r1
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a2a:	4690      	mov	r8, r2
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	eb18 0303 	adds.w	r3, r8, r3
 8002a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a38:	462b      	mov	r3, r5
 8002a3a:	eb49 0303 	adc.w	r3, r9, r3
 8002a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a56:	460b      	mov	r3, r1
 8002a58:	18db      	adds	r3, r3, r3
 8002a5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	eb42 0303 	adc.w	r3, r2, r3
 8002a62:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a6c:	f7fd fbba 	bl	80001e4 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4b61      	ldr	r3, [pc, #388]	@ (8002bfc <UART_SetConfig+0x2d4>)
 8002a76:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	011c      	lsls	r4, r3, #4
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	1891      	adds	r1, r2, r2
 8002a96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a98:	415b      	adcs	r3, r3
 8002a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ac0:	4692      	mov	sl, r2
 8002ac2:	469b      	mov	fp, r3
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8002aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aec:	460b      	mov	r3, r1
 8002aee:	18db      	adds	r3, r3, r3
 8002af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002af2:	4613      	mov	r3, r2
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b02:	f7fd fb6f 	bl	80001e4 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <UART_SetConfig+0x2d4>)
 8002b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2264      	movs	r2, #100	@ 0x64
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b22:	4b36      	ldr	r3, [pc, #216]	@ (8002bfc <UART_SetConfig+0x2d4>)
 8002b24:	fba3 2302 	umull	r2, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b30:	441c      	add	r4, r3
 8002b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b44:	4642      	mov	r2, r8
 8002b46:	464b      	mov	r3, r9
 8002b48:	1891      	adds	r1, r2, r2
 8002b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b54:	4641      	mov	r1, r8
 8002b56:	1851      	adds	r1, r2, r1
 8002b58:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	414b      	adcs	r3, r1
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	00cb      	lsls	r3, r1, #3
 8002b70:	4651      	mov	r1, sl
 8002b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b76:	4651      	mov	r1, sl
 8002b78:	00ca      	lsls	r2, r1, #3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4642      	mov	r2, r8
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b88:	464b      	mov	r3, r9
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	eb42 0303 	adc.w	r3, r2, r3
 8002b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ba8:	460b      	mov	r3, r1
 8002baa:	18db      	adds	r3, r3, r3
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bae:	4613      	mov	r3, r2
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bbe:	f7fd fb11 	bl	80001e4 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <UART_SetConfig+0x2d4>)
 8002bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	2164      	movs	r1, #100	@ 0x64
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	3332      	adds	r3, #50	@ 0x32
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <UART_SetConfig+0x2d4>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 0207 	and.w	r2, r3, #7
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4422      	add	r2, r4
 8002bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bf0:	e106      	b.n	8002e00 <UART_SetConfig+0x4d8>
 8002bf2:	bf00      	nop
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40011400 	.word	0x40011400
 8002bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c12:	4642      	mov	r2, r8
 8002c14:	464b      	mov	r3, r9
 8002c16:	1891      	adds	r1, r2, r2
 8002c18:	6239      	str	r1, [r7, #32]
 8002c1a:	415b      	adcs	r3, r3
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c22:	4641      	mov	r1, r8
 8002c24:	1854      	adds	r4, r2, r1
 8002c26:	4649      	mov	r1, r9
 8002c28:	eb43 0501 	adc.w	r5, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c48:	464b      	mov	r3, r9
 8002c4a:	eb45 0303 	adc.w	r3, r5, r3
 8002c4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c6e:	4629      	mov	r1, r5
 8002c70:	008b      	lsls	r3, r1, #2
 8002c72:	4621      	mov	r1, r4
 8002c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c78:	4621      	mov	r1, r4
 8002c7a:	008a      	lsls	r2, r1, #2
 8002c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c80:	f7fd fab0 	bl	80001e4 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4b60      	ldr	r3, [pc, #384]	@ (8002e0c <UART_SetConfig+0x4e4>)
 8002c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	011c      	lsls	r4, r3, #4
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	61b9      	str	r1, [r7, #24]
 8002cac:	415b      	adcs	r3, r3
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	1851      	adds	r1, r2, r1
 8002cb8:	6139      	str	r1, [r7, #16]
 8002cba:	4649      	mov	r1, r9
 8002cbc:	414b      	adcs	r3, r1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ccc:	4659      	mov	r1, fp
 8002cce:	00cb      	lsls	r3, r1, #3
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	00ca      	lsls	r2, r1, #3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce8:	464b      	mov	r3, r9
 8002cea:	460a      	mov	r2, r1
 8002cec:	eb42 0303 	adc.w	r3, r2, r3
 8002cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	008b      	lsls	r3, r1, #2
 8002d10:	4641      	mov	r1, r8
 8002d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d16:	4641      	mov	r1, r8
 8002d18:	008a      	lsls	r2, r1, #2
 8002d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d1e:	f7fd fa61 	bl	80001e4 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	4b38      	ldr	r3, [pc, #224]	@ (8002e0c <UART_SetConfig+0x4e4>)
 8002d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2264      	movs	r2, #100	@ 0x64
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	1acb      	subs	r3, r1, r3
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	3332      	adds	r3, #50	@ 0x32
 8002d3c:	4a33      	ldr	r2, [pc, #204]	@ (8002e0c <UART_SetConfig+0x4e4>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d48:	441c      	add	r4, r3
 8002d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d4e:	2200      	movs	r2, #0
 8002d50:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d52:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	415b      	adcs	r3, r3
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d68:	4641      	mov	r1, r8
 8002d6a:	1851      	adds	r1, r2, r1
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	4649      	mov	r1, r9
 8002d70:	414b      	adcs	r3, r1
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d80:	4659      	mov	r1, fp
 8002d82:	00cb      	lsls	r3, r1, #3
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	00ca      	lsls	r2, r1, #3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	4642      	mov	r2, r8
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	eb42 0303 	adc.w	r3, r2, r3
 8002da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dae:	667a      	str	r2, [r7, #100]	@ 0x64
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	008b      	lsls	r3, r1, #2
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	008a      	lsls	r2, r1, #2
 8002dca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dce:	f7fd fa09 	bl	80001e4 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <UART_SetConfig+0x4e4>)
 8002dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	2164      	movs	r1, #100	@ 0x64
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	3332      	adds	r3, #50	@ 0x32
 8002dea:	4a08      	ldr	r2, [pc, #32]	@ (8002e0c <UART_SetConfig+0x4e4>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4422      	add	r2, r4
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0c:	51eb851f 	.word	0x51eb851f

08002e10 <std>:
 8002e10:	2300      	movs	r3, #0
 8002e12:	b510      	push	{r4, lr}
 8002e14:	4604      	mov	r4, r0
 8002e16:	e9c0 3300 	strd	r3, r3, [r0]
 8002e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e1e:	6083      	str	r3, [r0, #8]
 8002e20:	8181      	strh	r1, [r0, #12]
 8002e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e24:	81c2      	strh	r2, [r0, #14]
 8002e26:	6183      	str	r3, [r0, #24]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	305c      	adds	r0, #92	@ 0x5c
 8002e2e:	f000 f9e7 	bl	8003200 <memset>
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <std+0x58>)
 8002e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <std+0x5c>)
 8002e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <std+0x60>)
 8002e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <std+0x64>)
 8002e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <std+0x68>)
 8002e44:	6224      	str	r4, [r4, #32]
 8002e46:	429c      	cmp	r4, r3
 8002e48:	d006      	beq.n	8002e58 <std+0x48>
 8002e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e4e:	4294      	cmp	r4, r2
 8002e50:	d002      	beq.n	8002e58 <std+0x48>
 8002e52:	33d0      	adds	r3, #208	@ 0xd0
 8002e54:	429c      	cmp	r4, r3
 8002e56:	d105      	bne.n	8002e64 <std+0x54>
 8002e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e60:	f000 ba54 	b.w	800330c <__retarget_lock_init_recursive>
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	08003051 	.word	0x08003051
 8002e6c:	08003073 	.word	0x08003073
 8002e70:	080030ab 	.word	0x080030ab
 8002e74:	080030cf 	.word	0x080030cf
 8002e78:	20000324 	.word	0x20000324

08002e7c <stdio_exit_handler>:
 8002e7c:	4a02      	ldr	r2, [pc, #8]	@ (8002e88 <stdio_exit_handler+0xc>)
 8002e7e:	4903      	ldr	r1, [pc, #12]	@ (8002e8c <stdio_exit_handler+0x10>)
 8002e80:	4803      	ldr	r0, [pc, #12]	@ (8002e90 <stdio_exit_handler+0x14>)
 8002e82:	f000 b869 	b.w	8002f58 <_fwalk_sglue>
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c
 8002e8c:	0800360d 	.word	0x0800360d
 8002e90:	2000001c 	.word	0x2000001c

08002e94 <cleanup_stdio>:
 8002e94:	6841      	ldr	r1, [r0, #4]
 8002e96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <cleanup_stdio+0x34>)
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	b510      	push	{r4, lr}
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	d001      	beq.n	8002ea4 <cleanup_stdio+0x10>
 8002ea0:	f000 fbb4 	bl	800360c <_fflush_r>
 8002ea4:	68a1      	ldr	r1, [r4, #8]
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <cleanup_stdio+0x38>)
 8002ea8:	4299      	cmp	r1, r3
 8002eaa:	d002      	beq.n	8002eb2 <cleanup_stdio+0x1e>
 8002eac:	4620      	mov	r0, r4
 8002eae:	f000 fbad 	bl	800360c <_fflush_r>
 8002eb2:	68e1      	ldr	r1, [r4, #12]
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <cleanup_stdio+0x3c>)
 8002eb6:	4299      	cmp	r1, r3
 8002eb8:	d004      	beq.n	8002ec4 <cleanup_stdio+0x30>
 8002eba:	4620      	mov	r0, r4
 8002ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ec0:	f000 bba4 	b.w	800360c <_fflush_r>
 8002ec4:	bd10      	pop	{r4, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000324 	.word	0x20000324
 8002ecc:	2000038c 	.word	0x2000038c
 8002ed0:	200003f4 	.word	0x200003f4

08002ed4 <global_stdio_init.part.0>:
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <global_stdio_init.part.0+0x30>)
 8002ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8002f08 <global_stdio_init.part.0+0x34>)
 8002eda:	4a0c      	ldr	r2, [pc, #48]	@ (8002f0c <global_stdio_init.part.0+0x38>)
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	4620      	mov	r0, r4
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	f7ff ff94 	bl	8002e10 <std>
 8002ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002eec:	2201      	movs	r2, #1
 8002eee:	2109      	movs	r1, #9
 8002ef0:	f7ff ff8e 	bl	8002e10 <std>
 8002ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ef8:	2202      	movs	r2, #2
 8002efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002efe:	2112      	movs	r1, #18
 8002f00:	f7ff bf86 	b.w	8002e10 <std>
 8002f04:	2000045c 	.word	0x2000045c
 8002f08:	20000324 	.word	0x20000324
 8002f0c:	08002e7d 	.word	0x08002e7d

08002f10 <__sfp_lock_acquire>:
 8002f10:	4801      	ldr	r0, [pc, #4]	@ (8002f18 <__sfp_lock_acquire+0x8>)
 8002f12:	f000 b9fc 	b.w	800330e <__retarget_lock_acquire_recursive>
 8002f16:	bf00      	nop
 8002f18:	20000465 	.word	0x20000465

08002f1c <__sfp_lock_release>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	@ (8002f24 <__sfp_lock_release+0x8>)
 8002f1e:	f000 b9f7 	b.w	8003310 <__retarget_lock_release_recursive>
 8002f22:	bf00      	nop
 8002f24:	20000465 	.word	0x20000465

08002f28 <__sinit>:
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	f7ff fff0 	bl	8002f10 <__sfp_lock_acquire>
 8002f30:	6a23      	ldr	r3, [r4, #32]
 8002f32:	b11b      	cbz	r3, 8002f3c <__sinit+0x14>
 8002f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f38:	f7ff bff0 	b.w	8002f1c <__sfp_lock_release>
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__sinit+0x28>)
 8002f3e:	6223      	str	r3, [r4, #32]
 8002f40:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <__sinit+0x2c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f5      	bne.n	8002f34 <__sinit+0xc>
 8002f48:	f7ff ffc4 	bl	8002ed4 <global_stdio_init.part.0>
 8002f4c:	e7f2      	b.n	8002f34 <__sinit+0xc>
 8002f4e:	bf00      	nop
 8002f50:	08002e95 	.word	0x08002e95
 8002f54:	2000045c 	.word	0x2000045c

08002f58 <_fwalk_sglue>:
 8002f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f5c:	4607      	mov	r7, r0
 8002f5e:	4688      	mov	r8, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	2600      	movs	r6, #0
 8002f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f68:	f1b9 0901 	subs.w	r9, r9, #1
 8002f6c:	d505      	bpl.n	8002f7a <_fwalk_sglue+0x22>
 8002f6e:	6824      	ldr	r4, [r4, #0]
 8002f70:	2c00      	cmp	r4, #0
 8002f72:	d1f7      	bne.n	8002f64 <_fwalk_sglue+0xc>
 8002f74:	4630      	mov	r0, r6
 8002f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f7a:	89ab      	ldrh	r3, [r5, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d907      	bls.n	8002f90 <_fwalk_sglue+0x38>
 8002f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f84:	3301      	adds	r3, #1
 8002f86:	d003      	beq.n	8002f90 <_fwalk_sglue+0x38>
 8002f88:	4629      	mov	r1, r5
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	47c0      	blx	r8
 8002f8e:	4306      	orrs	r6, r0
 8002f90:	3568      	adds	r5, #104	@ 0x68
 8002f92:	e7e9      	b.n	8002f68 <_fwalk_sglue+0x10>

08002f94 <_puts_r>:
 8002f94:	6a03      	ldr	r3, [r0, #32]
 8002f96:	b570      	push	{r4, r5, r6, lr}
 8002f98:	6884      	ldr	r4, [r0, #8]
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	460e      	mov	r6, r1
 8002f9e:	b90b      	cbnz	r3, 8002fa4 <_puts_r+0x10>
 8002fa0:	f7ff ffc2 	bl	8002f28 <__sinit>
 8002fa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fa6:	07db      	lsls	r3, r3, #31
 8002fa8:	d405      	bmi.n	8002fb6 <_puts_r+0x22>
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	0598      	lsls	r0, r3, #22
 8002fae:	d402      	bmi.n	8002fb6 <_puts_r+0x22>
 8002fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fb2:	f000 f9ac 	bl	800330e <__retarget_lock_acquire_recursive>
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	0719      	lsls	r1, r3, #28
 8002fba:	d502      	bpl.n	8002fc2 <_puts_r+0x2e>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d135      	bne.n	800302e <_puts_r+0x9a>
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 f8c5 	bl	8003154 <__swsetup_r>
 8002fca:	b380      	cbz	r0, 800302e <_puts_r+0x9a>
 8002fcc:	f04f 35ff 	mov.w	r5, #4294967295
 8002fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fd2:	07da      	lsls	r2, r3, #31
 8002fd4:	d405      	bmi.n	8002fe2 <_puts_r+0x4e>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	059b      	lsls	r3, r3, #22
 8002fda:	d402      	bmi.n	8002fe2 <_puts_r+0x4e>
 8002fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fde:	f000 f997 	bl	8003310 <__retarget_lock_release_recursive>
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da04      	bge.n	8002ff4 <_puts_r+0x60>
 8002fea:	69a2      	ldr	r2, [r4, #24]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dc17      	bgt.n	8003020 <_puts_r+0x8c>
 8002ff0:	290a      	cmp	r1, #10
 8002ff2:	d015      	beq.n	8003020 <_puts_r+0x8c>
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	6022      	str	r2, [r4, #0]
 8002ffa:	7019      	strb	r1, [r3, #0]
 8002ffc:	68a3      	ldr	r3, [r4, #8]
 8002ffe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003002:	3b01      	subs	r3, #1
 8003004:	60a3      	str	r3, [r4, #8]
 8003006:	2900      	cmp	r1, #0
 8003008:	d1ed      	bne.n	8002fe6 <_puts_r+0x52>
 800300a:	2b00      	cmp	r3, #0
 800300c:	da11      	bge.n	8003032 <_puts_r+0x9e>
 800300e:	4622      	mov	r2, r4
 8003010:	210a      	movs	r1, #10
 8003012:	4628      	mov	r0, r5
 8003014:	f000 f85f 	bl	80030d6 <__swbuf_r>
 8003018:	3001      	adds	r0, #1
 800301a:	d0d7      	beq.n	8002fcc <_puts_r+0x38>
 800301c:	250a      	movs	r5, #10
 800301e:	e7d7      	b.n	8002fd0 <_puts_r+0x3c>
 8003020:	4622      	mov	r2, r4
 8003022:	4628      	mov	r0, r5
 8003024:	f000 f857 	bl	80030d6 <__swbuf_r>
 8003028:	3001      	adds	r0, #1
 800302a:	d1e7      	bne.n	8002ffc <_puts_r+0x68>
 800302c:	e7ce      	b.n	8002fcc <_puts_r+0x38>
 800302e:	3e01      	subs	r6, #1
 8003030:	e7e4      	b.n	8002ffc <_puts_r+0x68>
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	6022      	str	r2, [r4, #0]
 8003038:	220a      	movs	r2, #10
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e7ee      	b.n	800301c <_puts_r+0x88>
	...

08003040 <puts>:
 8003040:	4b02      	ldr	r3, [pc, #8]	@ (800304c <puts+0xc>)
 8003042:	4601      	mov	r1, r0
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f7ff bfa5 	b.w	8002f94 <_puts_r>
 800304a:	bf00      	nop
 800304c:	20000018 	.word	0x20000018

08003050 <__sread>:
 8003050:	b510      	push	{r4, lr}
 8003052:	460c      	mov	r4, r1
 8003054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003058:	f000 f90a 	bl	8003270 <_read_r>
 800305c:	2800      	cmp	r0, #0
 800305e:	bfab      	itete	ge
 8003060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003062:	89a3      	ldrhlt	r3, [r4, #12]
 8003064:	181b      	addge	r3, r3, r0
 8003066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800306a:	bfac      	ite	ge
 800306c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800306e:	81a3      	strhlt	r3, [r4, #12]
 8003070:	bd10      	pop	{r4, pc}

08003072 <__swrite>:
 8003072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003076:	461f      	mov	r7, r3
 8003078:	898b      	ldrh	r3, [r1, #12]
 800307a:	05db      	lsls	r3, r3, #23
 800307c:	4605      	mov	r5, r0
 800307e:	460c      	mov	r4, r1
 8003080:	4616      	mov	r6, r2
 8003082:	d505      	bpl.n	8003090 <__swrite+0x1e>
 8003084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003088:	2302      	movs	r3, #2
 800308a:	2200      	movs	r2, #0
 800308c:	f000 f8de 	bl	800324c <_lseek_r>
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	4632      	mov	r2, r6
 800309e:	463b      	mov	r3, r7
 80030a0:	4628      	mov	r0, r5
 80030a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030a6:	f000 b8f5 	b.w	8003294 <_write_r>

080030aa <__sseek>:
 80030aa:	b510      	push	{r4, lr}
 80030ac:	460c      	mov	r4, r1
 80030ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b2:	f000 f8cb 	bl	800324c <_lseek_r>
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	89a3      	ldrh	r3, [r4, #12]
 80030ba:	bf15      	itete	ne
 80030bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030c6:	81a3      	strheq	r3, [r4, #12]
 80030c8:	bf18      	it	ne
 80030ca:	81a3      	strhne	r3, [r4, #12]
 80030cc:	bd10      	pop	{r4, pc}

080030ce <__sclose>:
 80030ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d2:	f000 b8ab 	b.w	800322c <_close_r>

080030d6 <__swbuf_r>:
 80030d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d8:	460e      	mov	r6, r1
 80030da:	4614      	mov	r4, r2
 80030dc:	4605      	mov	r5, r0
 80030de:	b118      	cbz	r0, 80030e8 <__swbuf_r+0x12>
 80030e0:	6a03      	ldr	r3, [r0, #32]
 80030e2:	b90b      	cbnz	r3, 80030e8 <__swbuf_r+0x12>
 80030e4:	f7ff ff20 	bl	8002f28 <__sinit>
 80030e8:	69a3      	ldr	r3, [r4, #24]
 80030ea:	60a3      	str	r3, [r4, #8]
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	071a      	lsls	r2, r3, #28
 80030f0:	d501      	bpl.n	80030f6 <__swbuf_r+0x20>
 80030f2:	6923      	ldr	r3, [r4, #16]
 80030f4:	b943      	cbnz	r3, 8003108 <__swbuf_r+0x32>
 80030f6:	4621      	mov	r1, r4
 80030f8:	4628      	mov	r0, r5
 80030fa:	f000 f82b 	bl	8003154 <__swsetup_r>
 80030fe:	b118      	cbz	r0, 8003108 <__swbuf_r+0x32>
 8003100:	f04f 37ff 	mov.w	r7, #4294967295
 8003104:	4638      	mov	r0, r7
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	6922      	ldr	r2, [r4, #16]
 800310c:	1a98      	subs	r0, r3, r2
 800310e:	6963      	ldr	r3, [r4, #20]
 8003110:	b2f6      	uxtb	r6, r6
 8003112:	4283      	cmp	r3, r0
 8003114:	4637      	mov	r7, r6
 8003116:	dc05      	bgt.n	8003124 <__swbuf_r+0x4e>
 8003118:	4621      	mov	r1, r4
 800311a:	4628      	mov	r0, r5
 800311c:	f000 fa76 	bl	800360c <_fflush_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	d1ed      	bne.n	8003100 <__swbuf_r+0x2a>
 8003124:	68a3      	ldr	r3, [r4, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	60a3      	str	r3, [r4, #8]
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	6022      	str	r2, [r4, #0]
 8003130:	701e      	strb	r6, [r3, #0]
 8003132:	6962      	ldr	r2, [r4, #20]
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	429a      	cmp	r2, r3
 8003138:	d004      	beq.n	8003144 <__swbuf_r+0x6e>
 800313a:	89a3      	ldrh	r3, [r4, #12]
 800313c:	07db      	lsls	r3, r3, #31
 800313e:	d5e1      	bpl.n	8003104 <__swbuf_r+0x2e>
 8003140:	2e0a      	cmp	r6, #10
 8003142:	d1df      	bne.n	8003104 <__swbuf_r+0x2e>
 8003144:	4621      	mov	r1, r4
 8003146:	4628      	mov	r0, r5
 8003148:	f000 fa60 	bl	800360c <_fflush_r>
 800314c:	2800      	cmp	r0, #0
 800314e:	d0d9      	beq.n	8003104 <__swbuf_r+0x2e>
 8003150:	e7d6      	b.n	8003100 <__swbuf_r+0x2a>
	...

08003154 <__swsetup_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <__swsetup_r+0xa8>)
 8003158:	4605      	mov	r5, r0
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	460c      	mov	r4, r1
 800315e:	b118      	cbz	r0, 8003168 <__swsetup_r+0x14>
 8003160:	6a03      	ldr	r3, [r0, #32]
 8003162:	b90b      	cbnz	r3, 8003168 <__swsetup_r+0x14>
 8003164:	f7ff fee0 	bl	8002f28 <__sinit>
 8003168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800316c:	0719      	lsls	r1, r3, #28
 800316e:	d422      	bmi.n	80031b6 <__swsetup_r+0x62>
 8003170:	06da      	lsls	r2, r3, #27
 8003172:	d407      	bmi.n	8003184 <__swsetup_r+0x30>
 8003174:	2209      	movs	r2, #9
 8003176:	602a      	str	r2, [r5, #0]
 8003178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	f04f 30ff 	mov.w	r0, #4294967295
 8003182:	e033      	b.n	80031ec <__swsetup_r+0x98>
 8003184:	0758      	lsls	r0, r3, #29
 8003186:	d512      	bpl.n	80031ae <__swsetup_r+0x5a>
 8003188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800318a:	b141      	cbz	r1, 800319e <__swsetup_r+0x4a>
 800318c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003190:	4299      	cmp	r1, r3
 8003192:	d002      	beq.n	800319a <__swsetup_r+0x46>
 8003194:	4628      	mov	r0, r5
 8003196:	f000 f8bd 	bl	8003314 <_free_r>
 800319a:	2300      	movs	r3, #0
 800319c:	6363      	str	r3, [r4, #52]	@ 0x34
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	2300      	movs	r3, #0
 80031a8:	6063      	str	r3, [r4, #4]
 80031aa:	6923      	ldr	r3, [r4, #16]
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	81a3      	strh	r3, [r4, #12]
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	b94b      	cbnz	r3, 80031ce <__swsetup_r+0x7a>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c4:	d003      	beq.n	80031ce <__swsetup_r+0x7a>
 80031c6:	4621      	mov	r1, r4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f000 fa6d 	bl	80036a8 <__smakebuf_r>
 80031ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d2:	f013 0201 	ands.w	r2, r3, #1
 80031d6:	d00a      	beq.n	80031ee <__swsetup_r+0x9a>
 80031d8:	2200      	movs	r2, #0
 80031da:	60a2      	str	r2, [r4, #8]
 80031dc:	6962      	ldr	r2, [r4, #20]
 80031de:	4252      	negs	r2, r2
 80031e0:	61a2      	str	r2, [r4, #24]
 80031e2:	6922      	ldr	r2, [r4, #16]
 80031e4:	b942      	cbnz	r2, 80031f8 <__swsetup_r+0xa4>
 80031e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80031ea:	d1c5      	bne.n	8003178 <__swsetup_r+0x24>
 80031ec:	bd38      	pop	{r3, r4, r5, pc}
 80031ee:	0799      	lsls	r1, r3, #30
 80031f0:	bf58      	it	pl
 80031f2:	6962      	ldrpl	r2, [r4, #20]
 80031f4:	60a2      	str	r2, [r4, #8]
 80031f6:	e7f4      	b.n	80031e2 <__swsetup_r+0x8e>
 80031f8:	2000      	movs	r0, #0
 80031fa:	e7f7      	b.n	80031ec <__swsetup_r+0x98>
 80031fc:	20000018 	.word	0x20000018

08003200 <memset>:
 8003200:	4402      	add	r2, r0
 8003202:	4603      	mov	r3, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <strchr>:
 8003210:	b2c9      	uxtb	r1, r1
 8003212:	4603      	mov	r3, r0
 8003214:	4618      	mov	r0, r3
 8003216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321a:	b112      	cbz	r2, 8003222 <strchr+0x12>
 800321c:	428a      	cmp	r2, r1
 800321e:	d1f9      	bne.n	8003214 <strchr+0x4>
 8003220:	4770      	bx	lr
 8003222:	2900      	cmp	r1, #0
 8003224:	bf18      	it	ne
 8003226:	2000      	movne	r0, #0
 8003228:	4770      	bx	lr
	...

0800322c <_close_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4d06      	ldr	r5, [pc, #24]	@ (8003248 <_close_r+0x1c>)
 8003230:	2300      	movs	r3, #0
 8003232:	4604      	mov	r4, r0
 8003234:	4608      	mov	r0, r1
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	f7fd fb77 	bl	800092a <_close>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_close_r+0x1a>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	b103      	cbz	r3, 8003246 <_close_r+0x1a>
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000460 	.word	0x20000460

0800324c <_lseek_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4d07      	ldr	r5, [pc, #28]	@ (800326c <_lseek_r+0x20>)
 8003250:	4604      	mov	r4, r0
 8003252:	4608      	mov	r0, r1
 8003254:	4611      	mov	r1, r2
 8003256:	2200      	movs	r2, #0
 8003258:	602a      	str	r2, [r5, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	f7fd fb8c 	bl	8000978 <_lseek>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d102      	bne.n	800326a <_lseek_r+0x1e>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b103      	cbz	r3, 800326a <_lseek_r+0x1e>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20000460 	.word	0x20000460

08003270 <_read_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4d07      	ldr	r5, [pc, #28]	@ (8003290 <_read_r+0x20>)
 8003274:	4604      	mov	r4, r0
 8003276:	4608      	mov	r0, r1
 8003278:	4611      	mov	r1, r2
 800327a:	2200      	movs	r2, #0
 800327c:	602a      	str	r2, [r5, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f7fd fb36 	bl	80008f0 <_read>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_read_r+0x1e>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_read_r+0x1e>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	20000460 	.word	0x20000460

08003294 <_write_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	4d07      	ldr	r5, [pc, #28]	@ (80032b4 <_write_r+0x20>)
 8003298:	4604      	mov	r4, r0
 800329a:	4608      	mov	r0, r1
 800329c:	4611      	mov	r1, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	602a      	str	r2, [r5, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7fd faa0 	bl	80007e8 <_write>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d102      	bne.n	80032b2 <_write_r+0x1e>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	b103      	cbz	r3, 80032b2 <_write_r+0x1e>
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000460 	.word	0x20000460

080032b8 <__errno>:
 80032b8:	4b01      	ldr	r3, [pc, #4]	@ (80032c0 <__errno+0x8>)
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000018 	.word	0x20000018

080032c4 <__libc_init_array>:
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	4d0d      	ldr	r5, [pc, #52]	@ (80032fc <__libc_init_array+0x38>)
 80032c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003300 <__libc_init_array+0x3c>)
 80032ca:	1b64      	subs	r4, r4, r5
 80032cc:	10a4      	asrs	r4, r4, #2
 80032ce:	2600      	movs	r6, #0
 80032d0:	42a6      	cmp	r6, r4
 80032d2:	d109      	bne.n	80032e8 <__libc_init_array+0x24>
 80032d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003304 <__libc_init_array+0x40>)
 80032d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003308 <__libc_init_array+0x44>)
 80032d8:	f000 fa54 	bl	8003784 <_init>
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	2600      	movs	r6, #0
 80032e2:	42a6      	cmp	r6, r4
 80032e4:	d105      	bne.n	80032f2 <__libc_init_array+0x2e>
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ec:	4798      	blx	r3
 80032ee:	3601      	adds	r6, #1
 80032f0:	e7ee      	b.n	80032d0 <__libc_init_array+0xc>
 80032f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f6:	4798      	blx	r3
 80032f8:	3601      	adds	r6, #1
 80032fa:	e7f2      	b.n	80032e2 <__libc_init_array+0x1e>
 80032fc:	080038f0 	.word	0x080038f0
 8003300:	080038f0 	.word	0x080038f0
 8003304:	080038f0 	.word	0x080038f0
 8003308:	080038f4 	.word	0x080038f4

0800330c <__retarget_lock_init_recursive>:
 800330c:	4770      	bx	lr

0800330e <__retarget_lock_acquire_recursive>:
 800330e:	4770      	bx	lr

08003310 <__retarget_lock_release_recursive>:
 8003310:	4770      	bx	lr
	...

08003314 <_free_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4605      	mov	r5, r0
 8003318:	2900      	cmp	r1, #0
 800331a:	d041      	beq.n	80033a0 <_free_r+0x8c>
 800331c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003320:	1f0c      	subs	r4, r1, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	bfb8      	it	lt
 8003326:	18e4      	addlt	r4, r4, r3
 8003328:	f000 f8e0 	bl	80034ec <__malloc_lock>
 800332c:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <_free_r+0x90>)
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	b933      	cbnz	r3, 8003340 <_free_r+0x2c>
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	6014      	str	r4, [r2, #0]
 8003336:	4628      	mov	r0, r5
 8003338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800333c:	f000 b8dc 	b.w	80034f8 <__malloc_unlock>
 8003340:	42a3      	cmp	r3, r4
 8003342:	d908      	bls.n	8003356 <_free_r+0x42>
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	1821      	adds	r1, r4, r0
 8003348:	428b      	cmp	r3, r1
 800334a:	bf01      	itttt	eq
 800334c:	6819      	ldreq	r1, [r3, #0]
 800334e:	685b      	ldreq	r3, [r3, #4]
 8003350:	1809      	addeq	r1, r1, r0
 8003352:	6021      	streq	r1, [r4, #0]
 8003354:	e7ed      	b.n	8003332 <_free_r+0x1e>
 8003356:	461a      	mov	r2, r3
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b10b      	cbz	r3, 8003360 <_free_r+0x4c>
 800335c:	42a3      	cmp	r3, r4
 800335e:	d9fa      	bls.n	8003356 <_free_r+0x42>
 8003360:	6811      	ldr	r1, [r2, #0]
 8003362:	1850      	adds	r0, r2, r1
 8003364:	42a0      	cmp	r0, r4
 8003366:	d10b      	bne.n	8003380 <_free_r+0x6c>
 8003368:	6820      	ldr	r0, [r4, #0]
 800336a:	4401      	add	r1, r0
 800336c:	1850      	adds	r0, r2, r1
 800336e:	4283      	cmp	r3, r0
 8003370:	6011      	str	r1, [r2, #0]
 8003372:	d1e0      	bne.n	8003336 <_free_r+0x22>
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	6053      	str	r3, [r2, #4]
 800337a:	4408      	add	r0, r1
 800337c:	6010      	str	r0, [r2, #0]
 800337e:	e7da      	b.n	8003336 <_free_r+0x22>
 8003380:	d902      	bls.n	8003388 <_free_r+0x74>
 8003382:	230c      	movs	r3, #12
 8003384:	602b      	str	r3, [r5, #0]
 8003386:	e7d6      	b.n	8003336 <_free_r+0x22>
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	1821      	adds	r1, r4, r0
 800338c:	428b      	cmp	r3, r1
 800338e:	bf04      	itt	eq
 8003390:	6819      	ldreq	r1, [r3, #0]
 8003392:	685b      	ldreq	r3, [r3, #4]
 8003394:	6063      	str	r3, [r4, #4]
 8003396:	bf04      	itt	eq
 8003398:	1809      	addeq	r1, r1, r0
 800339a:	6021      	streq	r1, [r4, #0]
 800339c:	6054      	str	r4, [r2, #4]
 800339e:	e7ca      	b.n	8003336 <_free_r+0x22>
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
 80033a2:	bf00      	nop
 80033a4:	2000046c 	.word	0x2000046c

080033a8 <sbrk_aligned>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	4e0f      	ldr	r6, [pc, #60]	@ (80033e8 <sbrk_aligned+0x40>)
 80033ac:	460c      	mov	r4, r1
 80033ae:	6831      	ldr	r1, [r6, #0]
 80033b0:	4605      	mov	r5, r0
 80033b2:	b911      	cbnz	r1, 80033ba <sbrk_aligned+0x12>
 80033b4:	f000 f9d6 	bl	8003764 <_sbrk_r>
 80033b8:	6030      	str	r0, [r6, #0]
 80033ba:	4621      	mov	r1, r4
 80033bc:	4628      	mov	r0, r5
 80033be:	f000 f9d1 	bl	8003764 <_sbrk_r>
 80033c2:	1c43      	adds	r3, r0, #1
 80033c4:	d103      	bne.n	80033ce <sbrk_aligned+0x26>
 80033c6:	f04f 34ff 	mov.w	r4, #4294967295
 80033ca:	4620      	mov	r0, r4
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	1cc4      	adds	r4, r0, #3
 80033d0:	f024 0403 	bic.w	r4, r4, #3
 80033d4:	42a0      	cmp	r0, r4
 80033d6:	d0f8      	beq.n	80033ca <sbrk_aligned+0x22>
 80033d8:	1a21      	subs	r1, r4, r0
 80033da:	4628      	mov	r0, r5
 80033dc:	f000 f9c2 	bl	8003764 <_sbrk_r>
 80033e0:	3001      	adds	r0, #1
 80033e2:	d1f2      	bne.n	80033ca <sbrk_aligned+0x22>
 80033e4:	e7ef      	b.n	80033c6 <sbrk_aligned+0x1e>
 80033e6:	bf00      	nop
 80033e8:	20000468 	.word	0x20000468

080033ec <_malloc_r>:
 80033ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f0:	1ccd      	adds	r5, r1, #3
 80033f2:	f025 0503 	bic.w	r5, r5, #3
 80033f6:	3508      	adds	r5, #8
 80033f8:	2d0c      	cmp	r5, #12
 80033fa:	bf38      	it	cc
 80033fc:	250c      	movcc	r5, #12
 80033fe:	2d00      	cmp	r5, #0
 8003400:	4606      	mov	r6, r0
 8003402:	db01      	blt.n	8003408 <_malloc_r+0x1c>
 8003404:	42a9      	cmp	r1, r5
 8003406:	d904      	bls.n	8003412 <_malloc_r+0x26>
 8003408:	230c      	movs	r3, #12
 800340a:	6033      	str	r3, [r6, #0]
 800340c:	2000      	movs	r0, #0
 800340e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034e8 <_malloc_r+0xfc>
 8003416:	f000 f869 	bl	80034ec <__malloc_lock>
 800341a:	f8d8 3000 	ldr.w	r3, [r8]
 800341e:	461c      	mov	r4, r3
 8003420:	bb44      	cbnz	r4, 8003474 <_malloc_r+0x88>
 8003422:	4629      	mov	r1, r5
 8003424:	4630      	mov	r0, r6
 8003426:	f7ff ffbf 	bl	80033a8 <sbrk_aligned>
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	4604      	mov	r4, r0
 800342e:	d158      	bne.n	80034e2 <_malloc_r+0xf6>
 8003430:	f8d8 4000 	ldr.w	r4, [r8]
 8003434:	4627      	mov	r7, r4
 8003436:	2f00      	cmp	r7, #0
 8003438:	d143      	bne.n	80034c2 <_malloc_r+0xd6>
 800343a:	2c00      	cmp	r4, #0
 800343c:	d04b      	beq.n	80034d6 <_malloc_r+0xea>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	4639      	mov	r1, r7
 8003442:	4630      	mov	r0, r6
 8003444:	eb04 0903 	add.w	r9, r4, r3
 8003448:	f000 f98c 	bl	8003764 <_sbrk_r>
 800344c:	4581      	cmp	r9, r0
 800344e:	d142      	bne.n	80034d6 <_malloc_r+0xea>
 8003450:	6821      	ldr	r1, [r4, #0]
 8003452:	1a6d      	subs	r5, r5, r1
 8003454:	4629      	mov	r1, r5
 8003456:	4630      	mov	r0, r6
 8003458:	f7ff ffa6 	bl	80033a8 <sbrk_aligned>
 800345c:	3001      	adds	r0, #1
 800345e:	d03a      	beq.n	80034d6 <_malloc_r+0xea>
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	442b      	add	r3, r5
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	f8d8 3000 	ldr.w	r3, [r8]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	bb62      	cbnz	r2, 80034c8 <_malloc_r+0xdc>
 800346e:	f8c8 7000 	str.w	r7, [r8]
 8003472:	e00f      	b.n	8003494 <_malloc_r+0xa8>
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	1b52      	subs	r2, r2, r5
 8003478:	d420      	bmi.n	80034bc <_malloc_r+0xd0>
 800347a:	2a0b      	cmp	r2, #11
 800347c:	d917      	bls.n	80034ae <_malloc_r+0xc2>
 800347e:	1961      	adds	r1, r4, r5
 8003480:	42a3      	cmp	r3, r4
 8003482:	6025      	str	r5, [r4, #0]
 8003484:	bf18      	it	ne
 8003486:	6059      	strne	r1, [r3, #4]
 8003488:	6863      	ldr	r3, [r4, #4]
 800348a:	bf08      	it	eq
 800348c:	f8c8 1000 	streq.w	r1, [r8]
 8003490:	5162      	str	r2, [r4, r5]
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	4630      	mov	r0, r6
 8003496:	f000 f82f 	bl	80034f8 <__malloc_unlock>
 800349a:	f104 000b 	add.w	r0, r4, #11
 800349e:	1d23      	adds	r3, r4, #4
 80034a0:	f020 0007 	bic.w	r0, r0, #7
 80034a4:	1ac2      	subs	r2, r0, r3
 80034a6:	bf1c      	itt	ne
 80034a8:	1a1b      	subne	r3, r3, r0
 80034aa:	50a3      	strne	r3, [r4, r2]
 80034ac:	e7af      	b.n	800340e <_malloc_r+0x22>
 80034ae:	6862      	ldr	r2, [r4, #4]
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	bf0c      	ite	eq
 80034b4:	f8c8 2000 	streq.w	r2, [r8]
 80034b8:	605a      	strne	r2, [r3, #4]
 80034ba:	e7eb      	b.n	8003494 <_malloc_r+0xa8>
 80034bc:	4623      	mov	r3, r4
 80034be:	6864      	ldr	r4, [r4, #4]
 80034c0:	e7ae      	b.n	8003420 <_malloc_r+0x34>
 80034c2:	463c      	mov	r4, r7
 80034c4:	687f      	ldr	r7, [r7, #4]
 80034c6:	e7b6      	b.n	8003436 <_malloc_r+0x4a>
 80034c8:	461a      	mov	r2, r3
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	d1fb      	bne.n	80034c8 <_malloc_r+0xdc>
 80034d0:	2300      	movs	r3, #0
 80034d2:	6053      	str	r3, [r2, #4]
 80034d4:	e7de      	b.n	8003494 <_malloc_r+0xa8>
 80034d6:	230c      	movs	r3, #12
 80034d8:	6033      	str	r3, [r6, #0]
 80034da:	4630      	mov	r0, r6
 80034dc:	f000 f80c 	bl	80034f8 <__malloc_unlock>
 80034e0:	e794      	b.n	800340c <_malloc_r+0x20>
 80034e2:	6005      	str	r5, [r0, #0]
 80034e4:	e7d6      	b.n	8003494 <_malloc_r+0xa8>
 80034e6:	bf00      	nop
 80034e8:	2000046c 	.word	0x2000046c

080034ec <__malloc_lock>:
 80034ec:	4801      	ldr	r0, [pc, #4]	@ (80034f4 <__malloc_lock+0x8>)
 80034ee:	f7ff bf0e 	b.w	800330e <__retarget_lock_acquire_recursive>
 80034f2:	bf00      	nop
 80034f4:	20000464 	.word	0x20000464

080034f8 <__malloc_unlock>:
 80034f8:	4801      	ldr	r0, [pc, #4]	@ (8003500 <__malloc_unlock+0x8>)
 80034fa:	f7ff bf09 	b.w	8003310 <__retarget_lock_release_recursive>
 80034fe:	bf00      	nop
 8003500:	20000464 	.word	0x20000464

08003504 <__sflush_r>:
 8003504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350c:	0716      	lsls	r6, r2, #28
 800350e:	4605      	mov	r5, r0
 8003510:	460c      	mov	r4, r1
 8003512:	d454      	bmi.n	80035be <__sflush_r+0xba>
 8003514:	684b      	ldr	r3, [r1, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	dc02      	bgt.n	8003520 <__sflush_r+0x1c>
 800351a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	dd48      	ble.n	80035b2 <__sflush_r+0xae>
 8003520:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003522:	2e00      	cmp	r6, #0
 8003524:	d045      	beq.n	80035b2 <__sflush_r+0xae>
 8003526:	2300      	movs	r3, #0
 8003528:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800352c:	682f      	ldr	r7, [r5, #0]
 800352e:	6a21      	ldr	r1, [r4, #32]
 8003530:	602b      	str	r3, [r5, #0]
 8003532:	d030      	beq.n	8003596 <__sflush_r+0x92>
 8003534:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	0759      	lsls	r1, r3, #29
 800353a:	d505      	bpl.n	8003548 <__sflush_r+0x44>
 800353c:	6863      	ldr	r3, [r4, #4]
 800353e:	1ad2      	subs	r2, r2, r3
 8003540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003542:	b10b      	cbz	r3, 8003548 <__sflush_r+0x44>
 8003544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	2300      	movs	r3, #0
 800354a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800354c:	6a21      	ldr	r1, [r4, #32]
 800354e:	4628      	mov	r0, r5
 8003550:	47b0      	blx	r6
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	d106      	bne.n	8003566 <__sflush_r+0x62>
 8003558:	6829      	ldr	r1, [r5, #0]
 800355a:	291d      	cmp	r1, #29
 800355c:	d82b      	bhi.n	80035b6 <__sflush_r+0xb2>
 800355e:	4a2a      	ldr	r2, [pc, #168]	@ (8003608 <__sflush_r+0x104>)
 8003560:	410a      	asrs	r2, r1
 8003562:	07d6      	lsls	r6, r2, #31
 8003564:	d427      	bmi.n	80035b6 <__sflush_r+0xb2>
 8003566:	2200      	movs	r2, #0
 8003568:	6062      	str	r2, [r4, #4]
 800356a:	04d9      	lsls	r1, r3, #19
 800356c:	6922      	ldr	r2, [r4, #16]
 800356e:	6022      	str	r2, [r4, #0]
 8003570:	d504      	bpl.n	800357c <__sflush_r+0x78>
 8003572:	1c42      	adds	r2, r0, #1
 8003574:	d101      	bne.n	800357a <__sflush_r+0x76>
 8003576:	682b      	ldr	r3, [r5, #0]
 8003578:	b903      	cbnz	r3, 800357c <__sflush_r+0x78>
 800357a:	6560      	str	r0, [r4, #84]	@ 0x54
 800357c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800357e:	602f      	str	r7, [r5, #0]
 8003580:	b1b9      	cbz	r1, 80035b2 <__sflush_r+0xae>
 8003582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003586:	4299      	cmp	r1, r3
 8003588:	d002      	beq.n	8003590 <__sflush_r+0x8c>
 800358a:	4628      	mov	r0, r5
 800358c:	f7ff fec2 	bl	8003314 <_free_r>
 8003590:	2300      	movs	r3, #0
 8003592:	6363      	str	r3, [r4, #52]	@ 0x34
 8003594:	e00d      	b.n	80035b2 <__sflush_r+0xae>
 8003596:	2301      	movs	r3, #1
 8003598:	4628      	mov	r0, r5
 800359a:	47b0      	blx	r6
 800359c:	4602      	mov	r2, r0
 800359e:	1c50      	adds	r0, r2, #1
 80035a0:	d1c9      	bne.n	8003536 <__sflush_r+0x32>
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0c6      	beq.n	8003536 <__sflush_r+0x32>
 80035a8:	2b1d      	cmp	r3, #29
 80035aa:	d001      	beq.n	80035b0 <__sflush_r+0xac>
 80035ac:	2b16      	cmp	r3, #22
 80035ae:	d11e      	bne.n	80035ee <__sflush_r+0xea>
 80035b0:	602f      	str	r7, [r5, #0]
 80035b2:	2000      	movs	r0, #0
 80035b4:	e022      	b.n	80035fc <__sflush_r+0xf8>
 80035b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ba:	b21b      	sxth	r3, r3
 80035bc:	e01b      	b.n	80035f6 <__sflush_r+0xf2>
 80035be:	690f      	ldr	r7, [r1, #16]
 80035c0:	2f00      	cmp	r7, #0
 80035c2:	d0f6      	beq.n	80035b2 <__sflush_r+0xae>
 80035c4:	0793      	lsls	r3, r2, #30
 80035c6:	680e      	ldr	r6, [r1, #0]
 80035c8:	bf08      	it	eq
 80035ca:	694b      	ldreq	r3, [r1, #20]
 80035cc:	600f      	str	r7, [r1, #0]
 80035ce:	bf18      	it	ne
 80035d0:	2300      	movne	r3, #0
 80035d2:	eba6 0807 	sub.w	r8, r6, r7
 80035d6:	608b      	str	r3, [r1, #8]
 80035d8:	f1b8 0f00 	cmp.w	r8, #0
 80035dc:	dde9      	ble.n	80035b2 <__sflush_r+0xae>
 80035de:	6a21      	ldr	r1, [r4, #32]
 80035e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80035e2:	4643      	mov	r3, r8
 80035e4:	463a      	mov	r2, r7
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b0      	blx	r6
 80035ea:	2800      	cmp	r0, #0
 80035ec:	dc08      	bgt.n	8003600 <__sflush_r+0xfc>
 80035ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	4407      	add	r7, r0
 8003602:	eba8 0800 	sub.w	r8, r8, r0
 8003606:	e7e7      	b.n	80035d8 <__sflush_r+0xd4>
 8003608:	dfbffffe 	.word	0xdfbffffe

0800360c <_fflush_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	690b      	ldr	r3, [r1, #16]
 8003610:	4605      	mov	r5, r0
 8003612:	460c      	mov	r4, r1
 8003614:	b913      	cbnz	r3, 800361c <_fflush_r+0x10>
 8003616:	2500      	movs	r5, #0
 8003618:	4628      	mov	r0, r5
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	b118      	cbz	r0, 8003626 <_fflush_r+0x1a>
 800361e:	6a03      	ldr	r3, [r0, #32]
 8003620:	b90b      	cbnz	r3, 8003626 <_fflush_r+0x1a>
 8003622:	f7ff fc81 	bl	8002f28 <__sinit>
 8003626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f3      	beq.n	8003616 <_fflush_r+0xa>
 800362e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003630:	07d0      	lsls	r0, r2, #31
 8003632:	d404      	bmi.n	800363e <_fflush_r+0x32>
 8003634:	0599      	lsls	r1, r3, #22
 8003636:	d402      	bmi.n	800363e <_fflush_r+0x32>
 8003638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800363a:	f7ff fe68 	bl	800330e <__retarget_lock_acquire_recursive>
 800363e:	4628      	mov	r0, r5
 8003640:	4621      	mov	r1, r4
 8003642:	f7ff ff5f 	bl	8003504 <__sflush_r>
 8003646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003648:	07da      	lsls	r2, r3, #31
 800364a:	4605      	mov	r5, r0
 800364c:	d4e4      	bmi.n	8003618 <_fflush_r+0xc>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	059b      	lsls	r3, r3, #22
 8003652:	d4e1      	bmi.n	8003618 <_fflush_r+0xc>
 8003654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003656:	f7ff fe5b 	bl	8003310 <__retarget_lock_release_recursive>
 800365a:	e7dd      	b.n	8003618 <_fflush_r+0xc>

0800365c <__swhatbuf_r>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	460c      	mov	r4, r1
 8003660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003664:	2900      	cmp	r1, #0
 8003666:	b096      	sub	sp, #88	@ 0x58
 8003668:	4615      	mov	r5, r2
 800366a:	461e      	mov	r6, r3
 800366c:	da0d      	bge.n	800368a <__swhatbuf_r+0x2e>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	bf14      	ite	ne
 800367a:	2340      	movne	r3, #64	@ 0x40
 800367c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003680:	2000      	movs	r0, #0
 8003682:	6031      	str	r1, [r6, #0]
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	b016      	add	sp, #88	@ 0x58
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	466a      	mov	r2, sp
 800368c:	f000 f848 	bl	8003720 <_fstat_r>
 8003690:	2800      	cmp	r0, #0
 8003692:	dbec      	blt.n	800366e <__swhatbuf_r+0x12>
 8003694:	9901      	ldr	r1, [sp, #4]
 8003696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800369a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800369e:	4259      	negs	r1, r3
 80036a0:	4159      	adcs	r1, r3
 80036a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036a6:	e7eb      	b.n	8003680 <__swhatbuf_r+0x24>

080036a8 <__smakebuf_r>:
 80036a8:	898b      	ldrh	r3, [r1, #12]
 80036aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ac:	079d      	lsls	r5, r3, #30
 80036ae:	4606      	mov	r6, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	d507      	bpl.n	80036c4 <__smakebuf_r+0x1c>
 80036b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	6123      	str	r3, [r4, #16]
 80036bc:	2301      	movs	r3, #1
 80036be:	6163      	str	r3, [r4, #20]
 80036c0:	b003      	add	sp, #12
 80036c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c4:	ab01      	add	r3, sp, #4
 80036c6:	466a      	mov	r2, sp
 80036c8:	f7ff ffc8 	bl	800365c <__swhatbuf_r>
 80036cc:	9f00      	ldr	r7, [sp, #0]
 80036ce:	4605      	mov	r5, r0
 80036d0:	4639      	mov	r1, r7
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7ff fe8a 	bl	80033ec <_malloc_r>
 80036d8:	b948      	cbnz	r0, 80036ee <__smakebuf_r+0x46>
 80036da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036de:	059a      	lsls	r2, r3, #22
 80036e0:	d4ee      	bmi.n	80036c0 <__smakebuf_r+0x18>
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	e7e2      	b.n	80036b4 <__smakebuf_r+0xc>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	6020      	str	r0, [r4, #0]
 80036f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	9b01      	ldr	r3, [sp, #4]
 80036fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80036fe:	b15b      	cbz	r3, 8003718 <__smakebuf_r+0x70>
 8003700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003704:	4630      	mov	r0, r6
 8003706:	f000 f81d 	bl	8003744 <_isatty_r>
 800370a:	b128      	cbz	r0, 8003718 <__smakebuf_r+0x70>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	431d      	orrs	r5, r3
 800371c:	81a5      	strh	r5, [r4, #12]
 800371e:	e7cf      	b.n	80036c0 <__smakebuf_r+0x18>

08003720 <_fstat_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d07      	ldr	r5, [pc, #28]	@ (8003740 <_fstat_r+0x20>)
 8003724:	2300      	movs	r3, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	602b      	str	r3, [r5, #0]
 800372e:	f7fd f908 	bl	8000942 <_fstat>
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	d102      	bne.n	800373c <_fstat_r+0x1c>
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	b103      	cbz	r3, 800373c <_fstat_r+0x1c>
 800373a:	6023      	str	r3, [r4, #0]
 800373c:	bd38      	pop	{r3, r4, r5, pc}
 800373e:	bf00      	nop
 8003740:	20000460 	.word	0x20000460

08003744 <_isatty_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d06      	ldr	r5, [pc, #24]	@ (8003760 <_isatty_r+0x1c>)
 8003748:	2300      	movs	r3, #0
 800374a:	4604      	mov	r4, r0
 800374c:	4608      	mov	r0, r1
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	f7fd f907 	bl	8000962 <_isatty>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_isatty_r+0x1a>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_isatty_r+0x1a>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	20000460 	.word	0x20000460

08003764 <_sbrk_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4d06      	ldr	r5, [pc, #24]	@ (8003780 <_sbrk_r+0x1c>)
 8003768:	2300      	movs	r3, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd f910 	bl	8000994 <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_sbrk_r+0x1a>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_sbrk_r+0x1a>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	20000460 	.word	0x20000460

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
