
iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b94  08004b94  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00005b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b98  08004b98  00005b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000005c  08004bf8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08004bf8  000064a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adcd  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002128  00000000  00000000  00010e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00012f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067f  00000000  00000000  00013828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ae  00000000  00000000  00013ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc78  00000000  00000000  0002b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e1b  00000000  00000000  00037fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000c8e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000cb578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004930 	.word	0x08004930

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004930 	.word	0x08004930

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <ESP_Send_AT_Command>:
#include "usart.h" // Include STM32 HAL for UART
#include "string.h"
#include <stdio.h>         // Include stdio.h for sprintf


void ESP_Send_AT_Command(const char *command) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)command,(uint16_t) strlen(command), HAL_MAX_DELAY);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fa0b 	bl	80001e0 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <ESP_Send_AT_Command+0x28>)
 8000dd6:	f002 f8ef 	bl	8002fb8 <HAL_UART_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000314 	.word	0x20000314

08000de8 <ESP_Init>:

void ESP_Init() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    // Initialize ESP by sending basic AT commands
    ESP_Send_AT_Command("AT+RST\r\n");
 8000dec:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <ESP_Init+0x40>)
 8000dee:	f7ff ffe5 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(500);
 8000df2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df6:	f000 fd23 	bl	8001840 <HAL_Delay>

    ESP_Send_AT_Command("ATE0\r\n");
 8000dfa:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <ESP_Init+0x44>)
 8000dfc:	f7ff ffde 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(500);
 8000e00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e04:	f000 fd1c 	bl	8001840 <HAL_Delay>

    // Set ESP32 to station mode
    ESP_Send_AT_Command("AT+CWMODE=1\r\n");
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <ESP_Init+0x48>)
 8000e0a:	f7ff ffd7 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(500);
 8000e0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e12:	f000 fd15 	bl	8001840 <HAL_Delay>

    // Connect to WiFi
    ESP_Send_AT_Command("AT+CWJAP_CUR=\"MOSTAFAGHAZY1\",\"MOSTAFA#MOSTAFA\"\r\n");
 8000e16:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <ESP_Init+0x4c>)
 8000e18:	f7ff ffd0 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(2000);
 8000e1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e20:	f000 fd0e 	bl	8001840 <HAL_Delay>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08004948 	.word	0x08004948
 8000e2c:	08004954 	.word	0x08004954
 8000e30:	0800495c 	.word	0x0800495c
 8000e34:	0800496c 	.word	0x0800496c

08000e38 <ESP_Get_LED_Status>:

void ESP_Get_LED_Status() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    // Start HTTP GET request to the server
    ESP_Send_AT_Command("AT+CIPSTART=\"TCP\",\"185.176.43.104\",80\r\n");
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <ESP_Get_LED_Status+0x34>)
 8000e3e:	f7ff ffbd 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(700);
 8000e42:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000e46:	f000 fcfb 	bl	8001840 <HAL_Delay>

    // Send GET request
        ESP_Send_AT_Command("AT+CIPSEND=68\r\n");  // Adjust 66 to the length of your GET request
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <ESP_Get_LED_Status+0x38>)
 8000e4c:	f7ff ffb6 	bl	8000dbc <ESP_Send_AT_Command>
        HAL_Delay(700);
 8000e50:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000e54:	f000 fcf4 	bl	8001840 <HAL_Delay>

        ESP_Send_AT_Command("GET http://iotprog.atwebpages.com/user_files/device_status_2.txt\r\n\r\n");
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <ESP_Get_LED_Status+0x3c>)
 8000e5a:	f7ff ffaf 	bl	8000dbc <ESP_Send_AT_Command>
        HAL_Delay(2000);
 8000e5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e62:	f000 fced 	bl	8001840 <HAL_Delay>

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	080049a0 	.word	0x080049a0
 8000e70:	080049c8 	.word	0x080049c8
 8000e74:	080049d8 	.word	0x080049d8

08000e78 <ESP_Post_Gas_Value>:
void ESP_Post_Gas_Value(uint8_t gasValue) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0d0      	sub	sp, #320	@ 0x140
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4602      	mov	r2, r0
 8000e80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e84:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 8000e88:	701a      	strb	r2, [r3, #0]
    // Start HTTP connection to the server
    ESP_Send_AT_Command("AT+CIPSTART=\"TCP\",\"iotprog.atwebpages.com\",80\r\n");
 8000e8a:	4826      	ldr	r0, [pc, #152]	@ (8000f24 <ESP_Post_Gas_Value+0xac>)
 8000e8c:	f7ff ff96 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(700);
 8000e90:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000e94:	f000 fcd4 	bl	8001840 <HAL_Delay>

    // Prepare POST data
    char postData[20];
    sprintf(postData, "value=%d", gasValue);
 8000e98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e9c:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000ea6:	4920      	ldr	r1, [pc, #128]	@ (8000f28 <ESP_Post_Gas_Value+0xb0>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 f88b 	bl	8003fc4 <siprintf>
    int contentLength = strlen(postData);
 8000eae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f994 	bl	80001e0 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    // Prepare the full HTTP POST request with dynamically calculated Content-Length
    char postRequest[256];
    sprintf(postRequest,
 8000ebe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000ec2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000ec6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000eca:	4918      	ldr	r1, [pc, #96]	@ (8000f2c <ESP_Post_Gas_Value+0xb4>)
 8000ecc:	f003 f87a 	bl	8003fc4 <siprintf>
            "Cookie: PHPSESSID=826b9b1abee731984f3c6e41bf6eb70d\r\n\r\n"
            "%s", contentLength, postData);

    // Send CIPSEND command with the actual length of the POST request
    char cipsendCommand[32];
    sprintf(cipsendCommand, "AT+CIPSEND=%d\r\n", strlen(postRequest));
 8000ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff f983 	bl	80001e0 <strlen>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4913      	ldr	r1, [pc, #76]	@ (8000f30 <ESP_Post_Gas_Value+0xb8>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 f86e 	bl	8003fc4 <siprintf>
    ESP_Send_AT_Command(cipsendCommand);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff65 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(700);
 8000ef2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000ef6:	f000 fca3 	bl	8001840 <HAL_Delay>

    // Send the actual POST request data
    ESP_Send_AT_Command(postRequest);
 8000efa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff5c 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(700);
 8000f04:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000f08:	f000 fc9a 	bl	8001840 <HAL_Delay>

    // Close the connection
    ESP_Send_AT_Command("AT+CIPCLOSE\r\n");
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <ESP_Post_Gas_Value+0xbc>)
 8000f0e:	f7ff ff55 	bl	8000dbc <ESP_Send_AT_Command>
    HAL_Delay(2000);
 8000f12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f16:	f000 fc93 	bl	8001840 <HAL_Delay>
}
 8000f1a:	bf00      	nop
 8000f1c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08004a20 	.word	0x08004a20
 8000f28:	08004a50 	.word	0x08004a50
 8000f2c:	08004a5c 	.word	0x08004a5c
 8000f30:	08004b18 	.word	0x08004b18
 8000f34:	08004b28 	.word	0x08004b28

08000f38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f78:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <MX_ADC1_Init+0xa0>)
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f96:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f98:	f000 fc76 	bl	8001888 <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f000 f9bb 	bl	800131c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000fb8:	f000 fdf6 	bl	8001ba8 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fc2:	f000 f9ab 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000078 	.word	0x20000078
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	0f000001 	.word	0x0f000001

08000fdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a17      	ldr	r2, [pc, #92]	@ (8001058 <HAL_ADC_MspInit+0x7c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d127      	bne.n	800104e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <HAL_ADC_MspInit+0x80>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a15      	ldr	r2, [pc, #84]	@ (800105c <HAL_ADC_MspInit+0x80>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <HAL_ADC_MspInit+0x80>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <HAL_ADC_MspInit+0x80>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a0e      	ldr	r2, [pc, #56]	@ (800105c <HAL_ADC_MspInit+0x80>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <HAL_ADC_MspInit+0x80>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001036:	2340      	movs	r3, #64	@ 0x40
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	2303      	movs	r3, #3
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <HAL_ADC_MspInit+0x84>)
 800104a:	f001 f96f 	bl	800232c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_GPIO_Init+0x98>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a1e      	ldr	r2, [pc, #120]	@ (80010fc <MX_GPIO_Init+0x98>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_GPIO_Init+0x98>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_GPIO_Init+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a17      	ldr	r2, [pc, #92]	@ (80010fc <MX_GPIO_Init+0x98>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_GPIO_Init+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_GPIO_Init+0x98>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a10      	ldr	r2, [pc, #64]	@ (80010fc <MX_GPIO_Init+0x98>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_GPIO_Init+0x98>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2101      	movs	r1, #1
 80010d2:	480b      	ldr	r0, [pc, #44]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010d4:	f001 faae 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010f0:	f001 f91c 	bl	800232c <HAL_GPIO_Init>

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000

08001104 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800110a:	f000 fb27 	bl	800175c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800110e:	f000 f85d 	bl	80011cc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001112:	f7ff ffa7 	bl	8001064 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001116:	f000 fa49 	bl	80015ac <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800111a:	f000 fa1d 	bl	8001558 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800111e:	f7ff ff0b 	bl	8000f38 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	ESP_Init();
 8001122:	f7ff fe61 	bl	8000de8 <ESP_Init>
	UART_Init();
 8001126:	f000 f9a9 	bl	800147c <UART_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
;		/* Check for periodic request */
		if (HAL_GetTick() - lastRequestTime >= REQUEST_INTERVAL) {
 800112a:	f000 fb7d 	bl	8001828 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <main+0xb8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800113a:	d314      	bcc.n	8001166 <main+0x62>
			lastRequestTime = HAL_GetTick(); // Update last request time
 800113c:	f000 fb74 	bl	8001828 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	4a1e      	ldr	r2, [pc, #120]	@ (80011bc <main+0xb8>)
 8001144:	6013      	str	r3, [r2, #0]
			uint8_t read=Get_tempRead();
 8001146:	f000 f89f 	bl	8001288 <Get_tempRead>
 800114a:	eef0 7a40 	vmov.f32	s15, s0
 800114e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	75fb      	strb	r3, [r7, #23]
			ESP_Post_Gas_Value(read);
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe8b 	bl	8000e78 <ESP_Post_Gas_Value>
			ESP_Get_LED_Status(); // Request LED status from the server
 8001162:	f7ff fe69 	bl	8000e38 <ESP_Get_LED_Status>
		}

		// Check for new data
		// Check for new data
		uint16_t bytesReceived = UART_GetData(receivedData, RX_BUFFER_SIZE);
 8001166:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800116a:	4815      	ldr	r0, [pc, #84]	@ (80011c0 <main+0xbc>)
 800116c:	f000 f9c6 	bl	80014fc <UART_GetData>
 8001170:	4603      	mov	r3, r0
 8001172:	82bb      	strh	r3, [r7, #20]
		if (bytesReceived > 0) {
 8001174:	8abb      	ldrh	r3, [r7, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0d7      	beq.n	800112a <main+0x26>
			// Ensure the received data is null-terminated
			receivedData[bytesReceived] = '\0';
 800117a:	8abb      	ldrh	r3, [r7, #20]
 800117c:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <main+0xbc>)
 800117e:	2100      	movs	r1, #0
 8001180:	54d1      	strb	r1, [r2, r3]

			// Search for "+IPD,1:" in the received data
			char *ipd_position = strstr((char*)receivedData, "+IPD,1:");
 8001182:	4910      	ldr	r1, [pc, #64]	@ (80011c4 <main+0xc0>)
 8001184:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <main+0xbc>)
 8001186:	f002 ff45 	bl	8004014 <strstr>
 800118a:	6138      	str	r0, [r7, #16]
			if (ipd_position != NULL) {
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0cb      	beq.n	800112a <main+0x26>
				// Move to the character right after "+IPD,1:" to get the content ('0' or '1')
				char content = *(ipd_position + strlen("+IPD,1:"));
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	79db      	ldrb	r3, [r3, #7]
 8001196:	73fb      	strb	r3, [r7, #15]

				// Check if content is '1' or '0' to set the LED state
				if (content == '1') {
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b31      	cmp	r3, #49	@ 0x31
 800119c:	d105      	bne.n	80011aa <main+0xa6>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  // Turn LED ON
 800119e:	2201      	movs	r2, #1
 80011a0:	2101      	movs	r1, #1
 80011a2:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <main+0xc4>)
 80011a4:	f001 fa46 	bl	8002634 <HAL_GPIO_WritePin>
 80011a8:	e7bf      	b.n	800112a <main+0x26>
				} else if (content == '0') {
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b30      	cmp	r3, #48	@ 0x30
 80011ae:	d1bc      	bne.n	800112a <main+0x26>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Turn LED OFF
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <main+0xc4>)
 80011b6:	f001 fa3d 	bl	8002634 <HAL_GPIO_WritePin>
	{
 80011ba:	e7b6      	b.n	800112a <main+0x26>
 80011bc:	200001c0 	.word	0x200001c0
 80011c0:	200000c0 	.word	0x200000c0
 80011c4:	08004b38 	.word	0x08004b38
 80011c8:	40020000 	.word	0x40020000

080011cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	@ 0x50
 80011d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	@ 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 ff12 	bl	8004004 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <SystemClock_Config+0xb4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <SystemClock_Config+0xb4>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <SystemClock_Config+0xb4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <SystemClock_Config+0xb8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001218:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <SystemClock_Config+0xb8>)
 800121a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <SystemClock_Config+0xb8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001236:	2300      	movs	r3, #0
 8001238:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fa12 	bl	8002668 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x82>
	{
		Error_Handler();
 800124a:	f000 f867 	bl	800131c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fc75 	bl	8002b58 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8001274:	f000 f852 	bl	800131c <Error_Handler>
	}
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	@ 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <Get_tempRead>:

/* USER CODE BEGIN 4 */
float Get_tempRead(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]

	// Start the ADC in Continuous Conversion Mode
	HAL_ADC_Start(&hadc1);
 8001292:	481f      	ldr	r0, [pc, #124]	@ (8001310 <Get_tempRead+0x88>)
 8001294:	f000 fb3c 	bl	8001910 <HAL_ADC_Start>

	// Poll for ADC conversion completion continuously
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	481c      	ldr	r0, [pc, #112]	@ (8001310 <Get_tempRead+0x88>)
 800129e:	f000 fbeb 	bl	8001a78 <HAL_ADC_PollForConversion>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d103      	bne.n	80012b0 <Get_tempRead+0x28>
		// Read the ADC value
		adc_value = HAL_ADC_GetValue(&hadc1);
 80012a8:	4819      	ldr	r0, [pc, #100]	@ (8001310 <Get_tempRead+0x88>)
 80012aa:	f000 fc70 	bl	8001b8e <HAL_ADC_GetValue>
 80012ae:	6078      	str	r0, [r7, #4]
	}

	// Convert ADC value to temperature in Celsius
	float temperature = (adc_value * 3.3 / 4096) * 100;
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff f92f 	bl	8000514 <__aeabi_ui2d>
 80012b6:	a314      	add	r3, pc, #80	@ (adr r3, 8001308 <Get_tempRead+0x80>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f9a4 	bl	8000608 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <Get_tempRead+0x8c>)
 80012ce:	f7ff fac5 	bl	800085c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <Get_tempRead+0x90>)
 80012e0:	f7ff f992 	bl	8000608 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fb9e 	bl	8000a2c <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	603b      	str	r3, [r7, #0]
	return temperature;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	ee07 3a90 	vmov	s15, r3
}
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	66666666 	.word	0x66666666
 800130c:	400a6666 	.word	0x400a6666
 8001310:	20000078 	.word	0x20000078
 8001314:	40b00000 	.word	0x40b00000
 8001318:	40590000 	.word	0x40590000

0800131c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 fa17 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <USART2_IRQHandler+0x10>)
 80013de:	f001 fe9b 	bl	8003118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000314 	.word	0x20000314

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f002 fe10 	bl	8004040 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20010000 	.word	0x20010000
 800144c:	00000400 	.word	0x00000400
 8001450:	200001c4 	.word	0x200001c4
 8001454:	200004a8 	.word	0x200004a8

08001458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <UART_Init>:
volatile uint16_t writeIndex = 0;  // Index to track where to write the next byte

extern UART_HandleTypeDef huart2;  // Make sure to declare this as extern, initialized in another file

/* Initialize UART receive with interrupt */
void UART_Init(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	// Start receiving data using interrupt, byte by byte
	HAL_UART_Receive_IT(&huart2, &rxBuffer[writeIndex], 1);
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <UART_Init+0x20>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <UART_Init+0x24>)
 800148a:	4413      	add	r3, r2
 800148c:	2201      	movs	r2, #1
 800148e:	4619      	mov	r1, r3
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <UART_Init+0x28>)
 8001492:	f001 fe1c 	bl	80030ce <HAL_UART_Receive_IT>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002c8 	.word	0x200002c8
 80014a0:	200001c8 	.word	0x200001c8
 80014a4:	20000314 	.word	0x20000314

080014a8 <HAL_UART_RxCpltCallback>:

/* Callback function for UART reception complete */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <HAL_UART_RxCpltCallback+0x48>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d116      	bne.n	80014e8 <HAL_UART_RxCpltCallback+0x40>
		// Move to the next index in the buffer
		writeIndex = (writeIndex + 1) % RX_BUFFER_SIZE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	425a      	negs	r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	bf58      	it	pl
 80014ca:	4253      	negpl	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014d0:	801a      	strh	r2, [r3, #0]

		// Re-initiate the UART receive interrupt for the next byte
		HAL_UART_Receive_IT(huart, &rxBuffer[writeIndex], 1);
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_UART_RxCpltCallback+0x50>)
 80014dc:	4413      	add	r3, r2
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f001 fdf3 	bl	80030ce <HAL_UART_Receive_IT>
	}
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40004400 	.word	0x40004400
 80014f4:	200002c8 	.word	0x200002c8
 80014f8:	200001c8 	.word	0x200001c8

080014fc <UART_GetData>:

/* Function to retrieve received data */
uint16_t UART_GetData(uint8_t* dataArray, uint16_t maxSize) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
	uint16_t bytesAvailable = writeIndex;  // Get the number of bytes written to buffer
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <UART_GetData+0x54>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	81bb      	strh	r3, [r7, #12]
	uint16_t count = (bytesAvailable > maxSize) ? maxSize : bytesAvailable;
 800150e:	89ba      	ldrh	r2, [r7, #12]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	4293      	cmp	r3, r2
 8001514:	bf28      	it	cs
 8001516:	4613      	movcs	r3, r2
 8001518:	817b      	strh	r3, [r7, #10]

	// Copy the data from the buffer into the passed array
	for (uint16_t i = 0; i < count; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	81fb      	strh	r3, [r7, #14]
 800151e:	e009      	b.n	8001534 <UART_GetData+0x38>
		dataArray[i] = rxBuffer[i];
 8001520:	89fa      	ldrh	r2, [r7, #14]
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	440b      	add	r3, r1
 8001528:	490a      	ldr	r1, [pc, #40]	@ (8001554 <UART_GetData+0x58>)
 800152a:	5c8a      	ldrb	r2, [r1, r2]
 800152c:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < count; i++) {
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	3301      	adds	r3, #1
 8001532:	81fb      	strh	r3, [r7, #14]
 8001534:	89fa      	ldrh	r2, [r7, #14]
 8001536:	897b      	ldrh	r3, [r7, #10]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3f1      	bcc.n	8001520 <UART_GetData+0x24>
	}

	// Reset the write index after the data is copied
	writeIndex = 0;
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <UART_GetData+0x54>)
 800153e:	2200      	movs	r2, #0
 8001540:	801a      	strh	r2, [r3, #0]

	return count;  // Return the number of bytes copied
 8001542:	897b      	ldrh	r3, [r7, #10]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	200002c8 	.word	0x200002c8
 8001554:	200001c8 	.word	0x200001c8

08001558 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <MX_USART1_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001590:	f001 fcc2 	bl	8002f18 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f7ff febf 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200002cc 	.word	0x200002cc
 80015a8:	40011000 	.word	0x40011000

080015ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <MX_USART2_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f001 fc98 	bl	8002f18 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ee:	f7ff fe95 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000314 	.word	0x20000314
 80015fc:	40004400 	.word	0x40004400

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a36      	ldr	r2, [pc, #216]	@ (80016f8 <HAL_UART_MspInit+0xf8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12d      	bne.n	800167e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b35      	ldr	r3, [pc, #212]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a34      	ldr	r2, [pc, #208]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a2d      	ldr	r2, [pc, #180]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166c:	2307      	movs	r3, #7
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	4822      	ldr	r0, [pc, #136]	@ (8001700 <HAL_UART_MspInit+0x100>)
 8001678:	f000 fe58 	bl	800232c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800167c:	e038      	b.n	80016f0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a20      	ldr	r2, [pc, #128]	@ (8001704 <HAL_UART_MspInit+0x104>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d133      	bne.n	80016f0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	4a1a      	ldr	r2, [pc, #104]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001696:	6413      	str	r3, [r2, #64]	@ 0x40
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_UART_MspInit+0xfc>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c0:	230c      	movs	r3, #12
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d0:	2307      	movs	r3, #7
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4809      	ldr	r0, [pc, #36]	@ (8001700 <HAL_UART_MspInit+0x100>)
 80016dc:	f000 fe26 	bl	800232c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2026      	movs	r0, #38	@ 0x26
 80016e6:	f000 fd58 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ea:	2026      	movs	r0, #38	@ 0x26
 80016ec:	f000 fd71 	bl	80021d2 <HAL_NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	@ 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000
 8001704:	40004400 	.word	0x40004400

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800170c:	f7ff fea4 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f002 fc89 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff fce3 	bl	8001104 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800174c:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 8001750:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001754:	200004a8 	.word	0x200004a8

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 fcfd 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fdca 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fd15 	bl	80021ee <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 fcdd 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	2000035c 	.word	0x2000035c

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000035c 	.word	0x2000035c

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffde 	bl	8001828 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e033      	b.n	8001906 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fb98 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018ce:	f023 0302 	bic.w	r3, r3, #2
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa86 	bl	8001dec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018f6:	e001      	b.n	80018fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_ADC_Start+0x1a>
 8001926:	2302      	movs	r3, #2
 8001928:	e097      	b.n	8001a5a <HAL_ADC_Start+0x14a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d018      	beq.n	8001972 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001950:	4b45      	ldr	r3, [pc, #276]	@ (8001a68 <HAL_ADC_Start+0x158>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a45      	ldr	r2, [pc, #276]	@ (8001a6c <HAL_ADC_Start+0x15c>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0c9a      	lsrs	r2, r3, #18
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001964:	e002      	b.n	800196c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3b01      	subs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f9      	bne.n	8001966 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d15f      	bne.n	8001a40 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019be:	d106      	bne.n	80019ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c4:	f023 0206 	bic.w	r2, r3, #6
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019dc:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_ADC_Start+0x160>)
 80019de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d129      	bne.n	8001a58 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	e020      	b.n	8001a58 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <HAL_ADC_Start+0x164>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d11b      	bne.n	8001a58 <HAL_ADC_Start+0x148>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d114      	bne.n	8001a58 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	e00b      	b.n	8001a58 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f043 0210 	orr.w	r2, r3, #16
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	40012300 	.word	0x40012300
 8001a74:	40012000 	.word	0x40012000

08001a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a94:	d113      	bne.n	8001abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f043 0220 	orr.w	r2, r3, #32
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e063      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001abe:	f7ff feb3 	bl	8001828 <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac4:	e021      	b.n	8001b0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d01d      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_ADC_PollForConversion+0x6c>
 8001ad4:	f7ff fea8 	bl	8001828 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d212      	bcs.n	8001b0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d00b      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e03d      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d1d6      	bne.n	8001ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0212 	mvn.w	r2, #18
 8001b20:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d123      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d11f      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e105      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x228>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	d925      	bls.n	8001c20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68d9      	ldr	r1, [r3, #12]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	3b1e      	subs	r3, #30
 8001bea:	2207      	movs	r2, #7
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68d9      	ldr	r1, [r3, #12]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4403      	add	r3, r0
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	409a      	lsls	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	e022      	b.n	8001c66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	2207      	movs	r2, #7
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4403      	add	r3, r0
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d824      	bhi.n	8001cb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b05      	subs	r3, #5
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b05      	subs	r3, #5
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cb6:	e04c      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d824      	bhi.n	8001d0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b23      	subs	r3, #35	@ 0x23
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	400a      	ands	r2, r1
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b23      	subs	r3, #35	@ 0x23
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d08:	e023      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b41      	subs	r3, #65	@ 0x41
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b41      	subs	r3, #65	@ 0x41
 8001d46:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d52:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <HAL_ADC_ConfigChannel+0x234>)
 8001d54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a21      	ldr	r2, [pc, #132]	@ (8001de0 <HAL_ADC_ConfigChannel+0x238>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d109      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1cc>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_ADC_ConfigChannel+0x238>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d003      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x1e6>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d111      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_ADC_ConfigChannel+0x23c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <HAL_ADC_ConfigChannel+0x240>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9a      	lsrs	r2, r3, #18
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	40012000 	.word	0x40012000
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df4:	4b79      	ldr	r3, [pc, #484]	@ (8001fdc <ADC_Init+0x1f0>)
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	4a58      	ldr	r2, [pc, #352]	@ (8001fe0 <ADC_Init+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e00f      	b.n	8001eea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e007      	b.n	8001f60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051a      	lsls	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fa2:	025a      	lsls	r2, r3, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	029a      	lsls	r2, r3, #10
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	0f000001 	.word	0x0f000001

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	@ (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fb08 	bl	8001828 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d008      	beq.n	8002238 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e052      	b.n	80022de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0216 	bic.w	r2, r2, #22
 8002246:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002256:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <HAL_DMA_Abort+0x62>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0208 	bic.w	r2, r2, #8
 8002276:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002288:	e013      	b.n	80022b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228a:	f7ff facd 	bl	8001828 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b05      	cmp	r3, #5
 8002296:	d90c      	bls.n	80022b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e015      	b.n	80022de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e4      	bne.n	800228a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c4:	223f      	movs	r2, #63	@ 0x3f
 80022c6:	409a      	lsls	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d004      	beq.n	8002304 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e00c      	b.n	800231e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2205      	movs	r2, #5
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	@ 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e159      	b.n	80025fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	f040 8148 	bne.w	80025f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d005      	beq.n	800237e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237a:	2b02      	cmp	r3, #2
 800237c:	d130      	bne.n	80023e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0201 	and.w	r2, r3, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d017      	beq.n	800241c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d123      	bne.n	8002470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	08da      	lsrs	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3208      	adds	r2, #8
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a2 	beq.w	80025f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b57      	ldr	r3, [pc, #348]	@ (8002614 <HAL_GPIO_Init+0x2e8>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	4a56      	ldr	r2, [pc, #344]	@ (8002614 <HAL_GPIO_Init+0x2e8>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	4b54      	ldr	r3, [pc, #336]	@ (8002614 <HAL_GPIO_Init+0x2e8>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ce:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_GPIO_Init+0x2ec>)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a49      	ldr	r2, [pc, #292]	@ (800261c <HAL_GPIO_Init+0x2f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x202>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a48      	ldr	r2, [pc, #288]	@ (8002620 <HAL_GPIO_Init+0x2f4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x1fe>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a47      	ldr	r2, [pc, #284]	@ (8002624 <HAL_GPIO_Init+0x2f8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x1fa>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a46      	ldr	r2, [pc, #280]	@ (8002628 <HAL_GPIO_Init+0x2fc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x1f6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a45      	ldr	r2, [pc, #276]	@ (800262c <HAL_GPIO_Init+0x300>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x1f2>
 800251a:	2304      	movs	r3, #4
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x204>
 800251e:	2307      	movs	r3, #7
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x204>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x204>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x204>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x204>
 800252e:	2300      	movs	r3, #0
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002540:	4935      	ldr	r1, [pc, #212]	@ (8002618 <HAL_GPIO_Init+0x2ec>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254e:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_GPIO_Init+0x304>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002572:	4a2f      	ldr	r2, [pc, #188]	@ (8002630 <HAL_GPIO_Init+0x304>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002578:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_GPIO_Init+0x304>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800259c:	4a24      	ldr	r2, [pc, #144]	@ (8002630 <HAL_GPIO_Init+0x304>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a2:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <HAL_GPIO_Init+0x304>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <HAL_GPIO_Init+0x304>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025cc:	4b18      	ldr	r3, [pc, #96]	@ (8002630 <HAL_GPIO_Init+0x304>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002630 <HAL_GPIO_Init+0x304>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	f67f aea2 	bls.w	8002348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3724      	adds	r7, #36	@ 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40013800 	.word	0x40013800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40021000 	.word	0x40021000
 8002630:	40013c00 	.word	0x40013c00

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	041a      	lsls	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e267      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d075      	beq.n	8002772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00c      	beq.n	80026ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800269a:	2b08      	cmp	r3, #8
 800269c:	d112      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b82      	ldr	r3, [pc, #520]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b7e      	ldr	r3, [pc, #504]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05b      	beq.n	8002770 <HAL_RCC_OscConfig+0x108>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d157      	bne.n	8002770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e242      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x74>
 80026ce:	4b76      	ldr	r3, [pc, #472]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a75      	ldr	r2, [pc, #468]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x98>
 80026e6:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6f      	ldr	r2, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b6d      	ldr	r3, [pc, #436]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6c      	ldr	r2, [pc, #432]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 8002700:	4b69      	ldr	r3, [pc, #420]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a68      	ldr	r2, [pc, #416]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a65      	ldr	r2, [pc, #404]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f882 	bl	8001828 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff f87e 	bl	8001828 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e207      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xc0>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff f86e 	bl	8001828 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff f86a 	bl	8001828 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1f3      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	4b51      	ldr	r3, [pc, #324]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0xe8>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800277e:	4b4a      	ldr	r3, [pc, #296]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b47      	ldr	r3, [pc, #284]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002792:	2b08      	cmp	r3, #8
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b44      	ldr	r3, [pc, #272]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x152>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1c7      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b3b      	ldr	r3, [pc, #236]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4937      	ldr	r1, [pc, #220]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	e03a      	b.n	8002846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b34      	ldr	r3, [pc, #208]	@ (80028ac <HAL_RCC_OscConfig+0x244>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7ff f823 	bl	8001828 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f81f 	bl	8001828 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1a8      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4925      	ldr	r1, [pc, #148]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x244>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7ff f802 	bl	8001828 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7fe fffe 	bl	8001828 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e187      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d036      	beq.n	80028c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <HAL_RCC_OscConfig+0x248>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe ffe2 	bl	8001828 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe ffde 	bl	8001828 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e167      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x200>
 8002886:	e01b      	b.n	80028c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_RCC_OscConfig+0x248>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe ffcb 	bl	8001828 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	e00e      	b.n	80028b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7fe ffc7 	bl	8001828 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d907      	bls.n	80028b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e150      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	42470000 	.word	0x42470000
 80028b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	4b88      	ldr	r3, [pc, #544]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ea      	bne.n	8002896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8097 	beq.w	80029fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d2:	4b81      	ldr	r3, [pc, #516]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ee:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b77      	ldr	r3, [pc, #476]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290a:	4b74      	ldr	r3, [pc, #464]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a73      	ldr	r2, [pc, #460]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002916:	f7fe ff87 	bl	8001828 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291e:	f7fe ff83 	bl	8001828 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e10c      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b6a      	ldr	r3, [pc, #424]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x2ea>
 8002944:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	4a63      	ldr	r2, [pc, #396]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002950:	e01c      	b.n	800298c <HAL_RCC_OscConfig+0x324>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x30c>
 800295a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70
 8002966:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0x324>
 8002974:	4b58      	ldr	r3, [pc, #352]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	4a57      	ldr	r2, [pc, #348]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002980:	4b55      	ldr	r3, [pc, #340]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a54      	ldr	r2, [pc, #336]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe ff48 	bl	8001828 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe ff44 	bl	8001828 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0cb      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	4b49      	ldr	r3, [pc, #292]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ee      	beq.n	800299c <HAL_RCC_OscConfig+0x334>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c0:	f7fe ff32 	bl	8001828 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe ff2e 	bl	8001828 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e0b5      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ee      	bne.n	80029c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	4a38      	ldr	r2, [pc, #224]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80a1 	beq.w	8002b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a06:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d05c      	beq.n	8002acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d141      	bne.n	8002a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ae0 <HAL_RCC_OscConfig+0x478>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe ff02 	bl	8001828 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fefe 	bl	8001828 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e087      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	491b      	ldr	r1, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <HAL_RCC_OscConfig+0x478>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fed7 	bl	8001828 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fed3 	bl	8001828 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e05c      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x416>
 8002a9c:	e054      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_RCC_OscConfig+0x478>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fec0 	bl	8001828 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe febc 	bl	8001828 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e045      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x444>
 8002aca:	e03d      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e038      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x4ec>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d028      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d121      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b14:	4013      	ands	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0cc      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b68      	ldr	r3, [pc, #416]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d90c      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d044      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d119      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b3f      	ldr	r3, [pc, #252]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e067      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b37      	ldr	r3, [pc, #220]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4934      	ldr	r1, [pc, #208]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fdee 	bl	8001828 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fdea 	bl	8001828 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e04f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d20c      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fd4e 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023c00 	.word	0x40023c00
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08004b40 	.word	0x08004b40
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b090      	sub	sp, #64	@ 0x40
 8002d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d00d      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x40>
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	f200 80a1 	bhi.w	8002e90 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x34>
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d56:	e09b      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d5c:	e09b      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d5e:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d62:	e098      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d028      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	2200      	movs	r2, #0
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d90:	fb03 f201 	mul.w	r2, r3, r1
 8002d94:	2300      	movs	r3, #0
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da4:	460a      	mov	r2, r1
 8002da6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002daa:	4413      	add	r3, r2
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db0:	2200      	movs	r2, #0
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	61fa      	str	r2, [r7, #28]
 8002db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dbe:	f7fd fe85 	bl	8000acc <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dca:	e053      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	617a      	str	r2, [r7, #20]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dde:	f04f 0b00 	mov.w	fp, #0
 8002de2:	4652      	mov	r2, sl
 8002de4:	465b      	mov	r3, fp
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	ebb2 080a 	subs.w	r8, r2, sl
 8002dfe:	eb63 090b 	sbc.w	r9, r3, fp
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e16:	ebb2 0408 	subs.w	r4, r2, r8
 8002e1a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	00eb      	lsls	r3, r5, #3
 8002e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2c:	00e2      	lsls	r2, r4, #3
 8002e2e:	4614      	mov	r4, r2
 8002e30:	461d      	mov	r5, r3
 8002e32:	eb14 030a 	adds.w	r3, r4, sl
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	eb45 030b 	adc.w	r3, r5, fp
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	028b      	lsls	r3, r1, #10
 8002e4e:	4621      	mov	r1, r4
 8002e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e54:	4621      	mov	r1, r4
 8002e56:	028a      	lsls	r2, r1, #10
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	60fa      	str	r2, [r7, #12]
 8002e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e68:	f7fd fe30 	bl	8000acc <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3740      	adds	r7, #64	@ 0x40
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	017d7840 	.word	0x017d7840

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	@ (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08004b50 	.word	0x08004b50

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef4:	f7ff ffdc 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0b5b      	lsrs	r3, r3, #13
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08004b50 	.word	0x08004b50

08002f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e042      	b.n	8002fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe fb5e 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fdbd 	bl	8003adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d175      	bne.n	80030c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Transmit+0x2c>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e06e      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2221      	movs	r2, #33	@ 0x21
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff6:	f7fe fc17 	bl	8001828 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003010:	d108      	bne.n	8003024 <HAL_UART_Transmit+0x6c>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800302c:	e02e      	b.n	800308c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fb1f 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e03a      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3302      	adds	r3, #2
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	e007      	b.n	800307e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1cb      	bne.n	800302e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	2140      	movs	r1, #64	@ 0x40
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 faeb 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e006      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d112      	bne.n	800310e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_UART_Receive_IT+0x26>
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e00b      	b.n	8003110 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	461a      	mov	r2, r3
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fb12 	bl	800372e <UART_Start_Receive_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	e000      	b.n	8003110 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0ba      	sub	sp, #232	@ 0xe8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10f      	bne.n	800317e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_UART_IRQHandler+0x66>
 800316a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fbf2 	bl	8003960 <UART_Receive_IT>
      return;
 800317c:	e25b      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800317e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80de 	beq.w	8003344 <HAL_UART_IRQHandler+0x22c>
 8003188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003198:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80d1 	beq.w	8003344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0xae>
 80031ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_UART_IRQHandler+0xd2>
 80031d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f043 0202 	orr.w	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xf6>
 80031f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <HAL_UART_IRQHandler+0x126>
 800321a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 81f2 	beq.w	800362c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_UART_IRQHandler+0x14e>
 8003254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb7d 	bl	8003960 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b40      	cmp	r3, #64	@ 0x40
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_UART_IRQHandler+0x17a>
 800328a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04f      	beq.n	8003332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa85 	bl	80037a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d141      	bne.n	800332a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1d9      	bne.n	80032a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d013      	beq.n	8003322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	4a7e      	ldr	r2, [pc, #504]	@ (80034f8 <HAL_UART_IRQHandler+0x3e0>)
 8003300:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ffed 	bl	80022e6 <HAL_DMA_Abort_IT>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	e00e      	b.n	8003340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f994 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	e00a      	b.n	8003340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f990 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e006      	b.n	8003340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f98c 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800333e:	e175      	b.n	800362c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	bf00      	nop
    return;
 8003342:	e173      	b.n	800362c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 814f 	bne.w	80035ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8148 	beq.w	80035ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800335c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8141 	beq.w	80035ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	f040 80b6 	bne.w	80034fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800339c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8145 	beq.w	8003630 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ae:	429a      	cmp	r2, r3
 80033b0:	f080 813e 	bcs.w	8003630 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c6:	f000 8088 	beq.w	80034da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1d9      	bne.n	80033ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800343a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800343e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800344c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e1      	bne.n	8003416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800347c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e3      	bne.n	8003452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e3      	bne.n	8003498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fe96 	bl	8002206 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8b7 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f6:	e09b      	b.n	8003630 <HAL_UART_IRQHandler+0x518>
 80034f8:	08003869 	.word	0x08003869
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003504:	b29b      	uxth	r3, r3
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 808e 	beq.w	8003634 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8089 	beq.w	8003634 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003546:	647a      	str	r2, [r7, #68]	@ 0x44
 8003548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800354c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e3      	bne.n	8003522 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	623b      	str	r3, [r7, #32]
   return(result);
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3314      	adds	r3, #20
 800357a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800357e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e3      	bne.n	800355a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0310 	bic.w	r3, r3, #16
 80035b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035c4:	61fa      	str	r2, [r7, #28]
 80035c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	69b9      	ldr	r1, [r7, #24]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	617b      	str	r3, [r7, #20]
   return(result);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e3      	bne.n	80035a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f83d 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ea:	e023      	b.n	8003634 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_UART_IRQHandler+0x4f4>
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f943 	bl	8003890 <UART_Transmit_IT>
    return;
 800360a:	e014      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_UART_IRQHandler+0x51e>
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f983 	bl	8003930 <UART_EndTransmit_IT>
    return;
 800362a:	e004      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
    return;
 800362c:	bf00      	nop
 800362e:	e002      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
      return;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
      return;
 8003634:	bf00      	nop
  }
}
 8003636:	37e8      	adds	r7, #232	@ 0xe8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	e03b      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d037      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7fe f8c7 	bl	8001828 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <UART_WaitOnFlagUntilTimeout+0x30>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03a      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d023      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b80      	cmp	r3, #128	@ 0x80
 80036c2:	d020      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b40      	cmp	r3, #64	@ 0x40
 80036c8:	d01d      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d116      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f857 	bl	80037a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2208      	movs	r2, #8
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0b4      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2222      	movs	r2, #34	@ 0x22
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003772:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b095      	sub	sp, #84	@ 0x54
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80037cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e5      	bne.n	80037aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	2b01      	cmp	r3, #1
 8003818:	d119      	bne.n	800384e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	60bb      	str	r3, [r7, #8]
   return(result);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f023 0310 	bic.w	r3, r3, #16
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800383a:	61ba      	str	r2, [r7, #24]
 800383c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	613b      	str	r3, [r7, #16]
   return(result);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800385c:	bf00      	nop
 800385e:	3754      	adds	r7, #84	@ 0x54
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fee4 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	@ 0x21
 80038a2:	d13e      	bne.n	8003922 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ac:	d114      	bne.n	80038d8 <UART_Transmit_IT+0x48>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d110      	bne.n	80038d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]
 80038d6:	e008      	b.n	80038ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6211      	str	r1, [r2, #32]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4619      	mov	r1, r3
 80038f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800390c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003946:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fe73 	bl	800363c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	@ 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b22      	cmp	r3, #34	@ 0x22
 8003972:	f040 80ae 	bne.w	8003ad2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397e:	d117      	bne.n	80039b0 <UART_Receive_IT+0x50>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ae:	e026      	b.n	80039fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d007      	beq.n	80039d4 <UART_Receive_IT+0x74>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <UART_Receive_IT+0x82>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e008      	b.n	80039f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d15d      	bne.n	8003ace <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0220 	bic.w	r2, r2, #32
 8003a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d135      	bne.n	8003ac4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f023 0310 	bic.w	r3, r3, #16
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	623a      	str	r2, [r7, #32]
 8003a80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	69f9      	ldr	r1, [r7, #28]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d10a      	bne.n	8003ab6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fdd1 	bl	8003664 <HAL_UARTEx_RxEventCallback>
 8003ac2:	e002      	b.n	8003aca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fd fcef 	bl	80014a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e002      	b.n	8003ad4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	@ 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b0c0      	sub	sp, #256	@ 0x100
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	68d9      	ldr	r1, [r3, #12]
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	ea40 0301 	orr.w	r3, r0, r1
 8003b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b34:	f021 010c 	bic.w	r1, r1, #12
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b42:	430b      	orrs	r3, r1
 8003b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	6999      	ldr	r1, [r3, #24]
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	ea40 0301 	orr.w	r3, r0, r1
 8003b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d005      	beq.n	8003b7c <UART_SetConfig+0xa0>
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8d      	ldr	r3, [pc, #564]	@ (8003dac <UART_SetConfig+0x2d0>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d104      	bne.n	8003b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7ff f9b8 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003b80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b84:	e003      	b.n	8003b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b86:	f7ff f99f 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b98:	f040 810c 	bne.w	8003db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	eb12 0801 	adds.w	r8, r2, r1
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb43 0901 	adc.w	r9, r3, r1
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bde:	4690      	mov	r8, r2
 8003be0:	4699      	mov	r9, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	eb18 0303 	adds.w	r3, r8, r3
 8003be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bec:	462b      	mov	r3, r5
 8003bee:	eb49 0303 	adc.w	r3, r9, r3
 8003bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	18db      	adds	r3, r3, r3
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c10:	4613      	mov	r3, r2
 8003c12:	eb42 0303 	adc.w	r3, r2, r3
 8003c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c20:	f7fc ff54 	bl	8000acc <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b61      	ldr	r3, [pc, #388]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	011c      	lsls	r4, r3, #4
 8003c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c54:	4641      	mov	r1, r8
 8003c56:	eb12 0a01 	adds.w	sl, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c74:	4692      	mov	sl, r2
 8003c76:	469b      	mov	fp, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c82:	464b      	mov	r3, r9
 8003c84:	eb4b 0303 	adc.w	r3, fp, r3
 8003c88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	18db      	adds	r3, r3, r3
 8003ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cb6:	f7fc ff09 	bl	8000acc <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2264      	movs	r2, #100	@ 0x64
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cd6:	4b36      	ldr	r3, [pc, #216]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d00:	415b      	adcs	r3, r3
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d08:	4641      	mov	r1, r8
 8003d0a:	1851      	adds	r1, r2, r1
 8003d0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d0e:	4649      	mov	r1, r9
 8003d10:	414b      	adcs	r3, r1
 8003d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d20:	4659      	mov	r1, fp
 8003d22:	00cb      	lsls	r3, r1, #3
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	00ca      	lsls	r2, r1, #3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	4642      	mov	r2, r8
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	18db      	adds	r3, r3, r3
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d62:	4613      	mov	r3, r2
 8003d64:	eb42 0303 	adc.w	r3, r2, r3
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d72:	f7fc feab 	bl	8000acc <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2164      	movs	r1, #100	@ 0x64
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	3332      	adds	r3, #50	@ 0x32
 8003d8e:	4a08      	ldr	r2, [pc, #32]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 0207 	and.w	r2, r3, #7
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4422      	add	r2, r4
 8003da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da4:	e106      	b.n	8003fb4 <UART_SetConfig+0x4d8>
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	464b      	mov	r3, r9
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	6239      	str	r1, [r7, #32]
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1854      	adds	r4, r2, r1
 8003dda:	4649      	mov	r1, r9
 8003ddc:	eb43 0501 	adc.w	r5, r3, r1
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	00eb      	lsls	r3, r5, #3
 8003dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dee:	00e2      	lsls	r2, r4, #3
 8003df0:	4614      	mov	r4, r2
 8003df2:	461d      	mov	r5, r3
 8003df4:	4643      	mov	r3, r8
 8003df6:	18e3      	adds	r3, r4, r3
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	eb45 0303 	adc.w	r3, r5, r3
 8003e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e22:	4629      	mov	r1, r5
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	008a      	lsls	r2, r1, #2
 8003e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e34:	f7fc fe4a 	bl	8000acc <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b60      	ldr	r3, [pc, #384]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	61b9      	str	r1, [r7, #24]
 8003e60:	415b      	adcs	r3, r3
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e68:	4641      	mov	r1, r8
 8003e6a:	1851      	adds	r1, r2, r1
 8003e6c:	6139      	str	r1, [r7, #16]
 8003e6e:	4649      	mov	r1, r9
 8003e70:	414b      	adcs	r3, r1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e80:	4659      	mov	r1, fp
 8003e82:	00cb      	lsls	r3, r1, #3
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	00ca      	lsls	r2, r1, #3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	4642      	mov	r2, r8
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	008b      	lsls	r3, r1, #2
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eca:	4641      	mov	r1, r8
 8003ecc:	008a      	lsls	r2, r1, #2
 8003ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ed2:	f7fc fdfb 	bl	8000acc <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	4b38      	ldr	r3, [pc, #224]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003ede:	fba3 2301 	umull	r2, r3, r3, r1
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2264      	movs	r2, #100	@ 0x64
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	1acb      	subs	r3, r1, r3
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	3332      	adds	r3, #50	@ 0x32
 8003ef0:	4a33      	ldr	r2, [pc, #204]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efc:	441c      	add	r4, r3
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f06:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	415b      	adcs	r3, r3
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	1851      	adds	r1, r2, r1
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	4649      	mov	r1, r9
 8003f24:	414b      	adcs	r3, r1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f34:	4659      	mov	r1, fp
 8003f36:	00cb      	lsls	r3, r1, #3
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3e:	4651      	mov	r1, sl
 8003f40:	00ca      	lsls	r2, r1, #3
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f4e:	464b      	mov	r3, r9
 8003f50:	460a      	mov	r2, r1
 8003f52:	eb42 0303 	adc.w	r3, r2, r3
 8003f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f62:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f70:	4649      	mov	r1, r9
 8003f72:	008b      	lsls	r3, r1, #2
 8003f74:	4641      	mov	r1, r8
 8003f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	008a      	lsls	r2, r1, #2
 8003f7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f82:	f7fc fda3 	bl	8000acc <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	2164      	movs	r1, #100	@ 0x64
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	3332      	adds	r3, #50	@ 0x32
 8003f9e:	4a08      	ldr	r2, [pc, #32]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4422      	add	r2, r4
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc0:	51eb851f 	.word	0x51eb851f

08003fc4 <siprintf>:
 8003fc4:	b40e      	push	{r1, r2, r3}
 8003fc6:	b500      	push	{lr}
 8003fc8:	b09c      	sub	sp, #112	@ 0x70
 8003fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fcc:	9002      	str	r0, [sp, #8]
 8003fce:	9006      	str	r0, [sp, #24]
 8003fd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fd4:	4809      	ldr	r0, [pc, #36]	@ (8003ffc <siprintf+0x38>)
 8003fd6:	9107      	str	r1, [sp, #28]
 8003fd8:	9104      	str	r1, [sp, #16]
 8003fda:	4909      	ldr	r1, [pc, #36]	@ (8004000 <siprintf+0x3c>)
 8003fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe0:	9105      	str	r1, [sp, #20]
 8003fe2:	6800      	ldr	r0, [r0, #0]
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	a902      	add	r1, sp, #8
 8003fe8:	f000 f9aa 	bl	8004340 <_svfiprintf_r>
 8003fec:	9b02      	ldr	r3, [sp, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	b01c      	add	sp, #112	@ 0x70
 8003ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff8:	b003      	add	sp, #12
 8003ffa:	4770      	bx	lr
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	ffff0208 	.word	0xffff0208

08004004 <memset>:
 8004004:	4402      	add	r2, r0
 8004006:	4603      	mov	r3, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	f803 1b01 	strb.w	r1, [r3], #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <strstr>:
 8004014:	780a      	ldrb	r2, [r1, #0]
 8004016:	b570      	push	{r4, r5, r6, lr}
 8004018:	b96a      	cbnz	r2, 8004036 <strstr+0x22>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	429a      	cmp	r2, r3
 800401e:	d109      	bne.n	8004034 <strstr+0x20>
 8004020:	460c      	mov	r4, r1
 8004022:	4605      	mov	r5, r0
 8004024:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f6      	beq.n	800401a <strstr+0x6>
 800402c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004030:	429e      	cmp	r6, r3
 8004032:	d0f7      	beq.n	8004024 <strstr+0x10>
 8004034:	3001      	adds	r0, #1
 8004036:	7803      	ldrb	r3, [r0, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ef      	bne.n	800401c <strstr+0x8>
 800403c:	4618      	mov	r0, r3
 800403e:	e7ec      	b.n	800401a <strstr+0x6>

08004040 <__errno>:
 8004040:	4b01      	ldr	r3, [pc, #4]	@ (8004048 <__errno+0x8>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	2000000c 	.word	0x2000000c

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4d0d      	ldr	r5, [pc, #52]	@ (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	@ (8004088 <__libc_init_array+0x3c>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2600      	movs	r6, #0
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4d0b      	ldr	r5, [pc, #44]	@ (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	@ (8004090 <__libc_init_array+0x44>)
 8004060:	f000 fc66 	bl	8004930 <_init>
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2600      	movs	r6, #0
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f855 3b04 	ldr.w	r3, [r5], #4
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f855 3b04 	ldr.w	r3, [r5], #4
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	08004b94 	.word	0x08004b94
 8004088:	08004b94 	.word	0x08004b94
 800408c:	08004b94 	.word	0x08004b94
 8004090:	08004b98 	.word	0x08004b98

08004094 <__retarget_lock_acquire_recursive>:
 8004094:	4770      	bx	lr

08004096 <__retarget_lock_release_recursive>:
 8004096:	4770      	bx	lr

08004098 <_free_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4605      	mov	r5, r0
 800409c:	2900      	cmp	r1, #0
 800409e:	d041      	beq.n	8004124 <_free_r+0x8c>
 80040a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a4:	1f0c      	subs	r4, r1, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfb8      	it	lt
 80040aa:	18e4      	addlt	r4, r4, r3
 80040ac:	f000 f8e0 	bl	8004270 <__malloc_lock>
 80040b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <_free_r+0x90>)
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	b933      	cbnz	r3, 80040c4 <_free_r+0x2c>
 80040b6:	6063      	str	r3, [r4, #4]
 80040b8:	6014      	str	r4, [r2, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c0:	f000 b8dc 	b.w	800427c <__malloc_unlock>
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d908      	bls.n	80040da <_free_r+0x42>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	1821      	adds	r1, r4, r0
 80040cc:	428b      	cmp	r3, r1
 80040ce:	bf01      	itttt	eq
 80040d0:	6819      	ldreq	r1, [r3, #0]
 80040d2:	685b      	ldreq	r3, [r3, #4]
 80040d4:	1809      	addeq	r1, r1, r0
 80040d6:	6021      	streq	r1, [r4, #0]
 80040d8:	e7ed      	b.n	80040b6 <_free_r+0x1e>
 80040da:	461a      	mov	r2, r3
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	b10b      	cbz	r3, 80040e4 <_free_r+0x4c>
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d9fa      	bls.n	80040da <_free_r+0x42>
 80040e4:	6811      	ldr	r1, [r2, #0]
 80040e6:	1850      	adds	r0, r2, r1
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d10b      	bne.n	8004104 <_free_r+0x6c>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	4401      	add	r1, r0
 80040f0:	1850      	adds	r0, r2, r1
 80040f2:	4283      	cmp	r3, r0
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	d1e0      	bne.n	80040ba <_free_r+0x22>
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	6053      	str	r3, [r2, #4]
 80040fe:	4408      	add	r0, r1
 8004100:	6010      	str	r0, [r2, #0]
 8004102:	e7da      	b.n	80040ba <_free_r+0x22>
 8004104:	d902      	bls.n	800410c <_free_r+0x74>
 8004106:	230c      	movs	r3, #12
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	e7d6      	b.n	80040ba <_free_r+0x22>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	1821      	adds	r1, r4, r0
 8004110:	428b      	cmp	r3, r1
 8004112:	bf04      	itt	eq
 8004114:	6819      	ldreq	r1, [r3, #0]
 8004116:	685b      	ldreq	r3, [r3, #4]
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	bf04      	itt	eq
 800411c:	1809      	addeq	r1, r1, r0
 800411e:	6021      	streq	r1, [r4, #0]
 8004120:	6054      	str	r4, [r2, #4]
 8004122:	e7ca      	b.n	80040ba <_free_r+0x22>
 8004124:	bd38      	pop	{r3, r4, r5, pc}
 8004126:	bf00      	nop
 8004128:	200004a4 	.word	0x200004a4

0800412c <sbrk_aligned>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4e0f      	ldr	r6, [pc, #60]	@ (800416c <sbrk_aligned+0x40>)
 8004130:	460c      	mov	r4, r1
 8004132:	6831      	ldr	r1, [r6, #0]
 8004134:	4605      	mov	r5, r0
 8004136:	b911      	cbnz	r1, 800413e <sbrk_aligned+0x12>
 8004138:	f000 fba6 	bl	8004888 <_sbrk_r>
 800413c:	6030      	str	r0, [r6, #0]
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 fba1 	bl	8004888 <_sbrk_r>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d103      	bne.n	8004152 <sbrk_aligned+0x26>
 800414a:	f04f 34ff 	mov.w	r4, #4294967295
 800414e:	4620      	mov	r0, r4
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	1cc4      	adds	r4, r0, #3
 8004154:	f024 0403 	bic.w	r4, r4, #3
 8004158:	42a0      	cmp	r0, r4
 800415a:	d0f8      	beq.n	800414e <sbrk_aligned+0x22>
 800415c:	1a21      	subs	r1, r4, r0
 800415e:	4628      	mov	r0, r5
 8004160:	f000 fb92 	bl	8004888 <_sbrk_r>
 8004164:	3001      	adds	r0, #1
 8004166:	d1f2      	bne.n	800414e <sbrk_aligned+0x22>
 8004168:	e7ef      	b.n	800414a <sbrk_aligned+0x1e>
 800416a:	bf00      	nop
 800416c:	200004a0 	.word	0x200004a0

08004170 <_malloc_r>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	1ccd      	adds	r5, r1, #3
 8004176:	f025 0503 	bic.w	r5, r5, #3
 800417a:	3508      	adds	r5, #8
 800417c:	2d0c      	cmp	r5, #12
 800417e:	bf38      	it	cc
 8004180:	250c      	movcc	r5, #12
 8004182:	2d00      	cmp	r5, #0
 8004184:	4606      	mov	r6, r0
 8004186:	db01      	blt.n	800418c <_malloc_r+0x1c>
 8004188:	42a9      	cmp	r1, r5
 800418a:	d904      	bls.n	8004196 <_malloc_r+0x26>
 800418c:	230c      	movs	r3, #12
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	2000      	movs	r0, #0
 8004192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800426c <_malloc_r+0xfc>
 800419a:	f000 f869 	bl	8004270 <__malloc_lock>
 800419e:	f8d8 3000 	ldr.w	r3, [r8]
 80041a2:	461c      	mov	r4, r3
 80041a4:	bb44      	cbnz	r4, 80041f8 <_malloc_r+0x88>
 80041a6:	4629      	mov	r1, r5
 80041a8:	4630      	mov	r0, r6
 80041aa:	f7ff ffbf 	bl	800412c <sbrk_aligned>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	4604      	mov	r4, r0
 80041b2:	d158      	bne.n	8004266 <_malloc_r+0xf6>
 80041b4:	f8d8 4000 	ldr.w	r4, [r8]
 80041b8:	4627      	mov	r7, r4
 80041ba:	2f00      	cmp	r7, #0
 80041bc:	d143      	bne.n	8004246 <_malloc_r+0xd6>
 80041be:	2c00      	cmp	r4, #0
 80041c0:	d04b      	beq.n	800425a <_malloc_r+0xea>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	4639      	mov	r1, r7
 80041c6:	4630      	mov	r0, r6
 80041c8:	eb04 0903 	add.w	r9, r4, r3
 80041cc:	f000 fb5c 	bl	8004888 <_sbrk_r>
 80041d0:	4581      	cmp	r9, r0
 80041d2:	d142      	bne.n	800425a <_malloc_r+0xea>
 80041d4:	6821      	ldr	r1, [r4, #0]
 80041d6:	1a6d      	subs	r5, r5, r1
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f7ff ffa6 	bl	800412c <sbrk_aligned>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d03a      	beq.n	800425a <_malloc_r+0xea>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	442b      	add	r3, r5
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	f8d8 3000 	ldr.w	r3, [r8]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	bb62      	cbnz	r2, 800424c <_malloc_r+0xdc>
 80041f2:	f8c8 7000 	str.w	r7, [r8]
 80041f6:	e00f      	b.n	8004218 <_malloc_r+0xa8>
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	1b52      	subs	r2, r2, r5
 80041fc:	d420      	bmi.n	8004240 <_malloc_r+0xd0>
 80041fe:	2a0b      	cmp	r2, #11
 8004200:	d917      	bls.n	8004232 <_malloc_r+0xc2>
 8004202:	1961      	adds	r1, r4, r5
 8004204:	42a3      	cmp	r3, r4
 8004206:	6025      	str	r5, [r4, #0]
 8004208:	bf18      	it	ne
 800420a:	6059      	strne	r1, [r3, #4]
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	bf08      	it	eq
 8004210:	f8c8 1000 	streq.w	r1, [r8]
 8004214:	5162      	str	r2, [r4, r5]
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	4630      	mov	r0, r6
 800421a:	f000 f82f 	bl	800427c <__malloc_unlock>
 800421e:	f104 000b 	add.w	r0, r4, #11
 8004222:	1d23      	adds	r3, r4, #4
 8004224:	f020 0007 	bic.w	r0, r0, #7
 8004228:	1ac2      	subs	r2, r0, r3
 800422a:	bf1c      	itt	ne
 800422c:	1a1b      	subne	r3, r3, r0
 800422e:	50a3      	strne	r3, [r4, r2]
 8004230:	e7af      	b.n	8004192 <_malloc_r+0x22>
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	42a3      	cmp	r3, r4
 8004236:	bf0c      	ite	eq
 8004238:	f8c8 2000 	streq.w	r2, [r8]
 800423c:	605a      	strne	r2, [r3, #4]
 800423e:	e7eb      	b.n	8004218 <_malloc_r+0xa8>
 8004240:	4623      	mov	r3, r4
 8004242:	6864      	ldr	r4, [r4, #4]
 8004244:	e7ae      	b.n	80041a4 <_malloc_r+0x34>
 8004246:	463c      	mov	r4, r7
 8004248:	687f      	ldr	r7, [r7, #4]
 800424a:	e7b6      	b.n	80041ba <_malloc_r+0x4a>
 800424c:	461a      	mov	r2, r3
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	42a3      	cmp	r3, r4
 8004252:	d1fb      	bne.n	800424c <_malloc_r+0xdc>
 8004254:	2300      	movs	r3, #0
 8004256:	6053      	str	r3, [r2, #4]
 8004258:	e7de      	b.n	8004218 <_malloc_r+0xa8>
 800425a:	230c      	movs	r3, #12
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	4630      	mov	r0, r6
 8004260:	f000 f80c 	bl	800427c <__malloc_unlock>
 8004264:	e794      	b.n	8004190 <_malloc_r+0x20>
 8004266:	6005      	str	r5, [r0, #0]
 8004268:	e7d6      	b.n	8004218 <_malloc_r+0xa8>
 800426a:	bf00      	nop
 800426c:	200004a4 	.word	0x200004a4

08004270 <__malloc_lock>:
 8004270:	4801      	ldr	r0, [pc, #4]	@ (8004278 <__malloc_lock+0x8>)
 8004272:	f7ff bf0f 	b.w	8004094 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	2000049c 	.word	0x2000049c

0800427c <__malloc_unlock>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__malloc_unlock+0x8>)
 800427e:	f7ff bf0a 	b.w	8004096 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	2000049c 	.word	0x2000049c

08004288 <__ssputs_r>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	688e      	ldr	r6, [r1, #8]
 800428e:	461f      	mov	r7, r3
 8004290:	42be      	cmp	r6, r7
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	4682      	mov	sl, r0
 8004296:	460c      	mov	r4, r1
 8004298:	4690      	mov	r8, r2
 800429a:	d82d      	bhi.n	80042f8 <__ssputs_r+0x70>
 800429c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042a4:	d026      	beq.n	80042f4 <__ssputs_r+0x6c>
 80042a6:	6965      	ldr	r5, [r4, #20]
 80042a8:	6909      	ldr	r1, [r1, #16]
 80042aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ae:	eba3 0901 	sub.w	r9, r3, r1
 80042b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042b6:	1c7b      	adds	r3, r7, #1
 80042b8:	444b      	add	r3, r9
 80042ba:	106d      	asrs	r5, r5, #1
 80042bc:	429d      	cmp	r5, r3
 80042be:	bf38      	it	cc
 80042c0:	461d      	movcc	r5, r3
 80042c2:	0553      	lsls	r3, r2, #21
 80042c4:	d527      	bpl.n	8004316 <__ssputs_r+0x8e>
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7ff ff52 	bl	8004170 <_malloc_r>
 80042cc:	4606      	mov	r6, r0
 80042ce:	b360      	cbz	r0, 800432a <__ssputs_r+0xa2>
 80042d0:	6921      	ldr	r1, [r4, #16]
 80042d2:	464a      	mov	r2, r9
 80042d4:	f000 fae8 	bl	80048a8 <memcpy>
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	6126      	str	r6, [r4, #16]
 80042e6:	6165      	str	r5, [r4, #20]
 80042e8:	444e      	add	r6, r9
 80042ea:	eba5 0509 	sub.w	r5, r5, r9
 80042ee:	6026      	str	r6, [r4, #0]
 80042f0:	60a5      	str	r5, [r4, #8]
 80042f2:	463e      	mov	r6, r7
 80042f4:	42be      	cmp	r6, r7
 80042f6:	d900      	bls.n	80042fa <__ssputs_r+0x72>
 80042f8:	463e      	mov	r6, r7
 80042fa:	6820      	ldr	r0, [r4, #0]
 80042fc:	4632      	mov	r2, r6
 80042fe:	4641      	mov	r1, r8
 8004300:	f000 faa8 	bl	8004854 <memmove>
 8004304:	68a3      	ldr	r3, [r4, #8]
 8004306:	1b9b      	subs	r3, r3, r6
 8004308:	60a3      	str	r3, [r4, #8]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	4433      	add	r3, r6
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	2000      	movs	r0, #0
 8004312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004316:	462a      	mov	r2, r5
 8004318:	f000 fad4 	bl	80048c4 <_realloc_r>
 800431c:	4606      	mov	r6, r0
 800431e:	2800      	cmp	r0, #0
 8004320:	d1e0      	bne.n	80042e4 <__ssputs_r+0x5c>
 8004322:	6921      	ldr	r1, [r4, #16]
 8004324:	4650      	mov	r0, sl
 8004326:	f7ff feb7 	bl	8004098 <_free_r>
 800432a:	230c      	movs	r3, #12
 800432c:	f8ca 3000 	str.w	r3, [sl]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e7e9      	b.n	8004312 <__ssputs_r+0x8a>
	...

08004340 <_svfiprintf_r>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	4698      	mov	r8, r3
 8004346:	898b      	ldrh	r3, [r1, #12]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	b09d      	sub	sp, #116	@ 0x74
 800434c:	4607      	mov	r7, r0
 800434e:	460d      	mov	r5, r1
 8004350:	4614      	mov	r4, r2
 8004352:	d510      	bpl.n	8004376 <_svfiprintf_r+0x36>
 8004354:	690b      	ldr	r3, [r1, #16]
 8004356:	b973      	cbnz	r3, 8004376 <_svfiprintf_r+0x36>
 8004358:	2140      	movs	r1, #64	@ 0x40
 800435a:	f7ff ff09 	bl	8004170 <_malloc_r>
 800435e:	6028      	str	r0, [r5, #0]
 8004360:	6128      	str	r0, [r5, #16]
 8004362:	b930      	cbnz	r0, 8004372 <_svfiprintf_r+0x32>
 8004364:	230c      	movs	r3, #12
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	b01d      	add	sp, #116	@ 0x74
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	2340      	movs	r3, #64	@ 0x40
 8004374:	616b      	str	r3, [r5, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	9309      	str	r3, [sp, #36]	@ 0x24
 800437a:	2320      	movs	r3, #32
 800437c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004380:	f8cd 800c 	str.w	r8, [sp, #12]
 8004384:	2330      	movs	r3, #48	@ 0x30
 8004386:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004524 <_svfiprintf_r+0x1e4>
 800438a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800438e:	f04f 0901 	mov.w	r9, #1
 8004392:	4623      	mov	r3, r4
 8004394:	469a      	mov	sl, r3
 8004396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800439a:	b10a      	cbz	r2, 80043a0 <_svfiprintf_r+0x60>
 800439c:	2a25      	cmp	r2, #37	@ 0x25
 800439e:	d1f9      	bne.n	8004394 <_svfiprintf_r+0x54>
 80043a0:	ebba 0b04 	subs.w	fp, sl, r4
 80043a4:	d00b      	beq.n	80043be <_svfiprintf_r+0x7e>
 80043a6:	465b      	mov	r3, fp
 80043a8:	4622      	mov	r2, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	4638      	mov	r0, r7
 80043ae:	f7ff ff6b 	bl	8004288 <__ssputs_r>
 80043b2:	3001      	adds	r0, #1
 80043b4:	f000 80a7 	beq.w	8004506 <_svfiprintf_r+0x1c6>
 80043b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ba:	445a      	add	r2, fp
 80043bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043be:	f89a 3000 	ldrb.w	r3, [sl]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 809f 	beq.w	8004506 <_svfiprintf_r+0x1c6>
 80043c8:	2300      	movs	r3, #0
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295
 80043ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d2:	f10a 0a01 	add.w	sl, sl, #1
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	9307      	str	r3, [sp, #28]
 80043da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043de:	931a      	str	r3, [sp, #104]	@ 0x68
 80043e0:	4654      	mov	r4, sl
 80043e2:	2205      	movs	r2, #5
 80043e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e8:	484e      	ldr	r0, [pc, #312]	@ (8004524 <_svfiprintf_r+0x1e4>)
 80043ea:	f7fb ff01 	bl	80001f0 <memchr>
 80043ee:	9a04      	ldr	r2, [sp, #16]
 80043f0:	b9d8      	cbnz	r0, 800442a <_svfiprintf_r+0xea>
 80043f2:	06d0      	lsls	r0, r2, #27
 80043f4:	bf44      	itt	mi
 80043f6:	2320      	movmi	r3, #32
 80043f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043fc:	0711      	lsls	r1, r2, #28
 80043fe:	bf44      	itt	mi
 8004400:	232b      	movmi	r3, #43	@ 0x2b
 8004402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004406:	f89a 3000 	ldrb.w	r3, [sl]
 800440a:	2b2a      	cmp	r3, #42	@ 0x2a
 800440c:	d015      	beq.n	800443a <_svfiprintf_r+0xfa>
 800440e:	9a07      	ldr	r2, [sp, #28]
 8004410:	4654      	mov	r4, sl
 8004412:	2000      	movs	r0, #0
 8004414:	f04f 0c0a 	mov.w	ip, #10
 8004418:	4621      	mov	r1, r4
 800441a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800441e:	3b30      	subs	r3, #48	@ 0x30
 8004420:	2b09      	cmp	r3, #9
 8004422:	d94b      	bls.n	80044bc <_svfiprintf_r+0x17c>
 8004424:	b1b0      	cbz	r0, 8004454 <_svfiprintf_r+0x114>
 8004426:	9207      	str	r2, [sp, #28]
 8004428:	e014      	b.n	8004454 <_svfiprintf_r+0x114>
 800442a:	eba0 0308 	sub.w	r3, r0, r8
 800442e:	fa09 f303 	lsl.w	r3, r9, r3
 8004432:	4313      	orrs	r3, r2
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	46a2      	mov	sl, r4
 8004438:	e7d2      	b.n	80043e0 <_svfiprintf_r+0xa0>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	1d19      	adds	r1, r3, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	9103      	str	r1, [sp, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfbb      	ittet	lt
 8004446:	425b      	neglt	r3, r3
 8004448:	f042 0202 	orrlt.w	r2, r2, #2
 800444c:	9307      	strge	r3, [sp, #28]
 800444e:	9307      	strlt	r3, [sp, #28]
 8004450:	bfb8      	it	lt
 8004452:	9204      	strlt	r2, [sp, #16]
 8004454:	7823      	ldrb	r3, [r4, #0]
 8004456:	2b2e      	cmp	r3, #46	@ 0x2e
 8004458:	d10a      	bne.n	8004470 <_svfiprintf_r+0x130>
 800445a:	7863      	ldrb	r3, [r4, #1]
 800445c:	2b2a      	cmp	r3, #42	@ 0x2a
 800445e:	d132      	bne.n	80044c6 <_svfiprintf_r+0x186>
 8004460:	9b03      	ldr	r3, [sp, #12]
 8004462:	1d1a      	adds	r2, r3, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	9203      	str	r2, [sp, #12]
 8004468:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800446c:	3402      	adds	r4, #2
 800446e:	9305      	str	r3, [sp, #20]
 8004470:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004534 <_svfiprintf_r+0x1f4>
 8004474:	7821      	ldrb	r1, [r4, #0]
 8004476:	2203      	movs	r2, #3
 8004478:	4650      	mov	r0, sl
 800447a:	f7fb feb9 	bl	80001f0 <memchr>
 800447e:	b138      	cbz	r0, 8004490 <_svfiprintf_r+0x150>
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	eba0 000a 	sub.w	r0, r0, sl
 8004486:	2240      	movs	r2, #64	@ 0x40
 8004488:	4082      	lsls	r2, r0
 800448a:	4313      	orrs	r3, r2
 800448c:	3401      	adds	r4, #1
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004494:	4824      	ldr	r0, [pc, #144]	@ (8004528 <_svfiprintf_r+0x1e8>)
 8004496:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800449a:	2206      	movs	r2, #6
 800449c:	f7fb fea8 	bl	80001f0 <memchr>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d036      	beq.n	8004512 <_svfiprintf_r+0x1d2>
 80044a4:	4b21      	ldr	r3, [pc, #132]	@ (800452c <_svfiprintf_r+0x1ec>)
 80044a6:	bb1b      	cbnz	r3, 80044f0 <_svfiprintf_r+0x1b0>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	3307      	adds	r3, #7
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	3308      	adds	r3, #8
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b6:	4433      	add	r3, r6
 80044b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ba:	e76a      	b.n	8004392 <_svfiprintf_r+0x52>
 80044bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c0:	460c      	mov	r4, r1
 80044c2:	2001      	movs	r0, #1
 80044c4:	e7a8      	b.n	8004418 <_svfiprintf_r+0xd8>
 80044c6:	2300      	movs	r3, #0
 80044c8:	3401      	adds	r4, #1
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	4620      	mov	r0, r4
 80044d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d8:	3a30      	subs	r2, #48	@ 0x30
 80044da:	2a09      	cmp	r2, #9
 80044dc:	d903      	bls.n	80044e6 <_svfiprintf_r+0x1a6>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0c6      	beq.n	8004470 <_svfiprintf_r+0x130>
 80044e2:	9105      	str	r1, [sp, #20]
 80044e4:	e7c4      	b.n	8004470 <_svfiprintf_r+0x130>
 80044e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ea:	4604      	mov	r4, r0
 80044ec:	2301      	movs	r3, #1
 80044ee:	e7f0      	b.n	80044d2 <_svfiprintf_r+0x192>
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	462a      	mov	r2, r5
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <_svfiprintf_r+0x1f0>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4638      	mov	r0, r7
 80044fc:	f3af 8000 	nop.w
 8004500:	1c42      	adds	r2, r0, #1
 8004502:	4606      	mov	r6, r0
 8004504:	d1d6      	bne.n	80044b4 <_svfiprintf_r+0x174>
 8004506:	89ab      	ldrh	r3, [r5, #12]
 8004508:	065b      	lsls	r3, r3, #25
 800450a:	f53f af2d 	bmi.w	8004368 <_svfiprintf_r+0x28>
 800450e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004510:	e72c      	b.n	800436c <_svfiprintf_r+0x2c>
 8004512:	ab03      	add	r3, sp, #12
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	462a      	mov	r2, r5
 8004518:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <_svfiprintf_r+0x1f0>)
 800451a:	a904      	add	r1, sp, #16
 800451c:	4638      	mov	r0, r7
 800451e:	f000 f879 	bl	8004614 <_printf_i>
 8004522:	e7ed      	b.n	8004500 <_svfiprintf_r+0x1c0>
 8004524:	08004b58 	.word	0x08004b58
 8004528:	08004b62 	.word	0x08004b62
 800452c:	00000000 	.word	0x00000000
 8004530:	08004289 	.word	0x08004289
 8004534:	08004b5e 	.word	0x08004b5e

08004538 <_printf_common>:
 8004538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	4616      	mov	r6, r2
 800453e:	4698      	mov	r8, r3
 8004540:	688a      	ldr	r2, [r1, #8]
 8004542:	690b      	ldr	r3, [r1, #16]
 8004544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004548:	4293      	cmp	r3, r2
 800454a:	bfb8      	it	lt
 800454c:	4613      	movlt	r3, r2
 800454e:	6033      	str	r3, [r6, #0]
 8004550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004554:	4607      	mov	r7, r0
 8004556:	460c      	mov	r4, r1
 8004558:	b10a      	cbz	r2, 800455e <_printf_common+0x26>
 800455a:	3301      	adds	r3, #1
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	0699      	lsls	r1, r3, #26
 8004562:	bf42      	ittt	mi
 8004564:	6833      	ldrmi	r3, [r6, #0]
 8004566:	3302      	addmi	r3, #2
 8004568:	6033      	strmi	r3, [r6, #0]
 800456a:	6825      	ldr	r5, [r4, #0]
 800456c:	f015 0506 	ands.w	r5, r5, #6
 8004570:	d106      	bne.n	8004580 <_printf_common+0x48>
 8004572:	f104 0a19 	add.w	sl, r4, #25
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	6832      	ldr	r2, [r6, #0]
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	42ab      	cmp	r3, r5
 800457e:	dc26      	bgt.n	80045ce <_printf_common+0x96>
 8004580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	3b00      	subs	r3, #0
 8004588:	bf18      	it	ne
 800458a:	2301      	movne	r3, #1
 800458c:	0692      	lsls	r2, r2, #26
 800458e:	d42b      	bmi.n	80045e8 <_printf_common+0xb0>
 8004590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004594:	4641      	mov	r1, r8
 8004596:	4638      	mov	r0, r7
 8004598:	47c8      	blx	r9
 800459a:	3001      	adds	r0, #1
 800459c:	d01e      	beq.n	80045dc <_printf_common+0xa4>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	6922      	ldr	r2, [r4, #16]
 80045a2:	f003 0306 	and.w	r3, r3, #6
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf02      	ittt	eq
 80045aa:	68e5      	ldreq	r5, [r4, #12]
 80045ac:	6833      	ldreq	r3, [r6, #0]
 80045ae:	1aed      	subeq	r5, r5, r3
 80045b0:	68a3      	ldr	r3, [r4, #8]
 80045b2:	bf0c      	ite	eq
 80045b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b8:	2500      	movne	r5, #0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	bfc4      	itt	gt
 80045be:	1a9b      	subgt	r3, r3, r2
 80045c0:	18ed      	addgt	r5, r5, r3
 80045c2:	2600      	movs	r6, #0
 80045c4:	341a      	adds	r4, #26
 80045c6:	42b5      	cmp	r5, r6
 80045c8:	d11a      	bne.n	8004600 <_printf_common+0xc8>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e008      	b.n	80045e0 <_printf_common+0xa8>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4652      	mov	r2, sl
 80045d2:	4641      	mov	r1, r8
 80045d4:	4638      	mov	r0, r7
 80045d6:	47c8      	blx	r9
 80045d8:	3001      	adds	r0, #1
 80045da:	d103      	bne.n	80045e4 <_printf_common+0xac>
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	3501      	adds	r5, #1
 80045e6:	e7c6      	b.n	8004576 <_printf_common+0x3e>
 80045e8:	18e1      	adds	r1, r4, r3
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	2030      	movs	r0, #48	@ 0x30
 80045ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045f2:	4422      	add	r2, r4
 80045f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045fc:	3302      	adds	r3, #2
 80045fe:	e7c7      	b.n	8004590 <_printf_common+0x58>
 8004600:	2301      	movs	r3, #1
 8004602:	4622      	mov	r2, r4
 8004604:	4641      	mov	r1, r8
 8004606:	4638      	mov	r0, r7
 8004608:	47c8      	blx	r9
 800460a:	3001      	adds	r0, #1
 800460c:	d0e6      	beq.n	80045dc <_printf_common+0xa4>
 800460e:	3601      	adds	r6, #1
 8004610:	e7d9      	b.n	80045c6 <_printf_common+0x8e>
	...

08004614 <_printf_i>:
 8004614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	7e0f      	ldrb	r7, [r1, #24]
 800461a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800461c:	2f78      	cmp	r7, #120	@ 0x78
 800461e:	4691      	mov	r9, r2
 8004620:	4680      	mov	r8, r0
 8004622:	460c      	mov	r4, r1
 8004624:	469a      	mov	sl, r3
 8004626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800462a:	d807      	bhi.n	800463c <_printf_i+0x28>
 800462c:	2f62      	cmp	r7, #98	@ 0x62
 800462e:	d80a      	bhi.n	8004646 <_printf_i+0x32>
 8004630:	2f00      	cmp	r7, #0
 8004632:	f000 80d2 	beq.w	80047da <_printf_i+0x1c6>
 8004636:	2f58      	cmp	r7, #88	@ 0x58
 8004638:	f000 80b9 	beq.w	80047ae <_printf_i+0x19a>
 800463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004644:	e03a      	b.n	80046bc <_printf_i+0xa8>
 8004646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800464a:	2b15      	cmp	r3, #21
 800464c:	d8f6      	bhi.n	800463c <_printf_i+0x28>
 800464e:	a101      	add	r1, pc, #4	@ (adr r1, 8004654 <_printf_i+0x40>)
 8004650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004654:	080046ad 	.word	0x080046ad
 8004658:	080046c1 	.word	0x080046c1
 800465c:	0800463d 	.word	0x0800463d
 8004660:	0800463d 	.word	0x0800463d
 8004664:	0800463d 	.word	0x0800463d
 8004668:	0800463d 	.word	0x0800463d
 800466c:	080046c1 	.word	0x080046c1
 8004670:	0800463d 	.word	0x0800463d
 8004674:	0800463d 	.word	0x0800463d
 8004678:	0800463d 	.word	0x0800463d
 800467c:	0800463d 	.word	0x0800463d
 8004680:	080047c1 	.word	0x080047c1
 8004684:	080046eb 	.word	0x080046eb
 8004688:	0800477b 	.word	0x0800477b
 800468c:	0800463d 	.word	0x0800463d
 8004690:	0800463d 	.word	0x0800463d
 8004694:	080047e3 	.word	0x080047e3
 8004698:	0800463d 	.word	0x0800463d
 800469c:	080046eb 	.word	0x080046eb
 80046a0:	0800463d 	.word	0x0800463d
 80046a4:	0800463d 	.word	0x0800463d
 80046a8:	08004783 	.word	0x08004783
 80046ac:	6833      	ldr	r3, [r6, #0]
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6032      	str	r2, [r6, #0]
 80046b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046bc:	2301      	movs	r3, #1
 80046be:	e09d      	b.n	80047fc <_printf_i+0x1e8>
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	6031      	str	r1, [r6, #0]
 80046c8:	0606      	lsls	r6, r0, #24
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0xbc>
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	e003      	b.n	80046d8 <_printf_i+0xc4>
 80046d0:	0645      	lsls	r5, r0, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0xb8>
 80046d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046d8:	2d00      	cmp	r5, #0
 80046da:	da03      	bge.n	80046e4 <_printf_i+0xd0>
 80046dc:	232d      	movs	r3, #45	@ 0x2d
 80046de:	426d      	negs	r5, r5
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e4:	4859      	ldr	r0, [pc, #356]	@ (800484c <_printf_i+0x238>)
 80046e6:	230a      	movs	r3, #10
 80046e8:	e011      	b.n	800470e <_printf_i+0xfa>
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	0608      	lsls	r0, r1, #24
 80046f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046f4:	d402      	bmi.n	80046fc <_printf_i+0xe8>
 80046f6:	0649      	lsls	r1, r1, #25
 80046f8:	bf48      	it	mi
 80046fa:	b2ad      	uxthmi	r5, r5
 80046fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046fe:	4853      	ldr	r0, [pc, #332]	@ (800484c <_printf_i+0x238>)
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	bf14      	ite	ne
 8004704:	230a      	movne	r3, #10
 8004706:	2308      	moveq	r3, #8
 8004708:	2100      	movs	r1, #0
 800470a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800470e:	6866      	ldr	r6, [r4, #4]
 8004710:	60a6      	str	r6, [r4, #8]
 8004712:	2e00      	cmp	r6, #0
 8004714:	bfa2      	ittt	ge
 8004716:	6821      	ldrge	r1, [r4, #0]
 8004718:	f021 0104 	bicge.w	r1, r1, #4
 800471c:	6021      	strge	r1, [r4, #0]
 800471e:	b90d      	cbnz	r5, 8004724 <_printf_i+0x110>
 8004720:	2e00      	cmp	r6, #0
 8004722:	d04b      	beq.n	80047bc <_printf_i+0x1a8>
 8004724:	4616      	mov	r6, r2
 8004726:	fbb5 f1f3 	udiv	r1, r5, r3
 800472a:	fb03 5711 	mls	r7, r3, r1, r5
 800472e:	5dc7      	ldrb	r7, [r0, r7]
 8004730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004734:	462f      	mov	r7, r5
 8004736:	42bb      	cmp	r3, r7
 8004738:	460d      	mov	r5, r1
 800473a:	d9f4      	bls.n	8004726 <_printf_i+0x112>
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10b      	bne.n	8004758 <_printf_i+0x144>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	07df      	lsls	r7, r3, #31
 8004744:	d508      	bpl.n	8004758 <_printf_i+0x144>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	6861      	ldr	r1, [r4, #4]
 800474a:	4299      	cmp	r1, r3
 800474c:	bfde      	ittt	le
 800474e:	2330      	movle	r3, #48	@ 0x30
 8004750:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004754:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004758:	1b92      	subs	r2, r2, r6
 800475a:	6122      	str	r2, [r4, #16]
 800475c:	f8cd a000 	str.w	sl, [sp]
 8004760:	464b      	mov	r3, r9
 8004762:	aa03      	add	r2, sp, #12
 8004764:	4621      	mov	r1, r4
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fee6 	bl	8004538 <_printf_common>
 800476c:	3001      	adds	r0, #1
 800476e:	d14a      	bne.n	8004806 <_printf_i+0x1f2>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	b004      	add	sp, #16
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	4833      	ldr	r0, [pc, #204]	@ (8004850 <_printf_i+0x23c>)
 8004784:	2778      	movs	r7, #120	@ 0x78
 8004786:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	6831      	ldr	r1, [r6, #0]
 800478e:	061f      	lsls	r7, r3, #24
 8004790:	f851 5b04 	ldr.w	r5, [r1], #4
 8004794:	d402      	bmi.n	800479c <_printf_i+0x188>
 8004796:	065f      	lsls	r7, r3, #25
 8004798:	bf48      	it	mi
 800479a:	b2ad      	uxthmi	r5, r5
 800479c:	6031      	str	r1, [r6, #0]
 800479e:	07d9      	lsls	r1, r3, #31
 80047a0:	bf44      	itt	mi
 80047a2:	f043 0320 	orrmi.w	r3, r3, #32
 80047a6:	6023      	strmi	r3, [r4, #0]
 80047a8:	b11d      	cbz	r5, 80047b2 <_printf_i+0x19e>
 80047aa:	2310      	movs	r3, #16
 80047ac:	e7ac      	b.n	8004708 <_printf_i+0xf4>
 80047ae:	4827      	ldr	r0, [pc, #156]	@ (800484c <_printf_i+0x238>)
 80047b0:	e7e9      	b.n	8004786 <_printf_i+0x172>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f023 0320 	bic.w	r3, r3, #32
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	e7f6      	b.n	80047aa <_printf_i+0x196>
 80047bc:	4616      	mov	r6, r2
 80047be:	e7bd      	b.n	800473c <_printf_i+0x128>
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	6961      	ldr	r1, [r4, #20]
 80047c6:	1d18      	adds	r0, r3, #4
 80047c8:	6030      	str	r0, [r6, #0]
 80047ca:	062e      	lsls	r6, r5, #24
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0x1c0>
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0x1c6>
 80047d4:	0668      	lsls	r0, r5, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0x1bc>
 80047d8:	8019      	strh	r1, [r3, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	4616      	mov	r6, r2
 80047e0:	e7bc      	b.n	800475c <_printf_i+0x148>
 80047e2:	6833      	ldr	r3, [r6, #0]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	6032      	str	r2, [r6, #0]
 80047e8:	681e      	ldr	r6, [r3, #0]
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4630      	mov	r0, r6
 80047f0:	f7fb fcfe 	bl	80001f0 <memchr>
 80047f4:	b108      	cbz	r0, 80047fa <_printf_i+0x1e6>
 80047f6:	1b80      	subs	r0, r0, r6
 80047f8:	6060      	str	r0, [r4, #4]
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	2300      	movs	r3, #0
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004804:	e7aa      	b.n	800475c <_printf_i+0x148>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	4632      	mov	r2, r6
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	47d0      	blx	sl
 8004810:	3001      	adds	r0, #1
 8004812:	d0ad      	beq.n	8004770 <_printf_i+0x15c>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	079b      	lsls	r3, r3, #30
 8004818:	d413      	bmi.n	8004842 <_printf_i+0x22e>
 800481a:	68e0      	ldr	r0, [r4, #12]
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	4298      	cmp	r0, r3
 8004820:	bfb8      	it	lt
 8004822:	4618      	movlt	r0, r3
 8004824:	e7a6      	b.n	8004774 <_printf_i+0x160>
 8004826:	2301      	movs	r3, #1
 8004828:	4632      	mov	r2, r6
 800482a:	4649      	mov	r1, r9
 800482c:	4640      	mov	r0, r8
 800482e:	47d0      	blx	sl
 8004830:	3001      	adds	r0, #1
 8004832:	d09d      	beq.n	8004770 <_printf_i+0x15c>
 8004834:	3501      	adds	r5, #1
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	9903      	ldr	r1, [sp, #12]
 800483a:	1a5b      	subs	r3, r3, r1
 800483c:	42ab      	cmp	r3, r5
 800483e:	dcf2      	bgt.n	8004826 <_printf_i+0x212>
 8004840:	e7eb      	b.n	800481a <_printf_i+0x206>
 8004842:	2500      	movs	r5, #0
 8004844:	f104 0619 	add.w	r6, r4, #25
 8004848:	e7f5      	b.n	8004836 <_printf_i+0x222>
 800484a:	bf00      	nop
 800484c:	08004b69 	.word	0x08004b69
 8004850:	08004b7a 	.word	0x08004b7a

08004854 <memmove>:
 8004854:	4288      	cmp	r0, r1
 8004856:	b510      	push	{r4, lr}
 8004858:	eb01 0402 	add.w	r4, r1, r2
 800485c:	d902      	bls.n	8004864 <memmove+0x10>
 800485e:	4284      	cmp	r4, r0
 8004860:	4623      	mov	r3, r4
 8004862:	d807      	bhi.n	8004874 <memmove+0x20>
 8004864:	1e43      	subs	r3, r0, #1
 8004866:	42a1      	cmp	r1, r4
 8004868:	d008      	beq.n	800487c <memmove+0x28>
 800486a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004872:	e7f8      	b.n	8004866 <memmove+0x12>
 8004874:	4402      	add	r2, r0
 8004876:	4601      	mov	r1, r0
 8004878:	428a      	cmp	r2, r1
 800487a:	d100      	bne.n	800487e <memmove+0x2a>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004886:	e7f7      	b.n	8004878 <memmove+0x24>

08004888 <_sbrk_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4d06      	ldr	r5, [pc, #24]	@ (80048a4 <_sbrk_r+0x1c>)
 800488c:	2300      	movs	r3, #0
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fc fdaa 	bl	80013ec <_sbrk>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_sbrk_r+0x1a>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_sbrk_r+0x1a>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	20000498 	.word	0x20000498

080048a8 <memcpy>:
 80048a8:	440a      	add	r2, r1
 80048aa:	4291      	cmp	r1, r2
 80048ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b0:	d100      	bne.n	80048b4 <memcpy+0xc>
 80048b2:	4770      	bx	lr
 80048b4:	b510      	push	{r4, lr}
 80048b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048be:	4291      	cmp	r1, r2
 80048c0:	d1f9      	bne.n	80048b6 <memcpy+0xe>
 80048c2:	bd10      	pop	{r4, pc}

080048c4 <_realloc_r>:
 80048c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c8:	4680      	mov	r8, r0
 80048ca:	4615      	mov	r5, r2
 80048cc:	460c      	mov	r4, r1
 80048ce:	b921      	cbnz	r1, 80048da <_realloc_r+0x16>
 80048d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d4:	4611      	mov	r1, r2
 80048d6:	f7ff bc4b 	b.w	8004170 <_malloc_r>
 80048da:	b92a      	cbnz	r2, 80048e8 <_realloc_r+0x24>
 80048dc:	f7ff fbdc 	bl	8004098 <_free_r>
 80048e0:	2400      	movs	r4, #0
 80048e2:	4620      	mov	r0, r4
 80048e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e8:	f000 f81a 	bl	8004920 <_malloc_usable_size_r>
 80048ec:	4285      	cmp	r5, r0
 80048ee:	4606      	mov	r6, r0
 80048f0:	d802      	bhi.n	80048f8 <_realloc_r+0x34>
 80048f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048f6:	d8f4      	bhi.n	80048e2 <_realloc_r+0x1e>
 80048f8:	4629      	mov	r1, r5
 80048fa:	4640      	mov	r0, r8
 80048fc:	f7ff fc38 	bl	8004170 <_malloc_r>
 8004900:	4607      	mov	r7, r0
 8004902:	2800      	cmp	r0, #0
 8004904:	d0ec      	beq.n	80048e0 <_realloc_r+0x1c>
 8004906:	42b5      	cmp	r5, r6
 8004908:	462a      	mov	r2, r5
 800490a:	4621      	mov	r1, r4
 800490c:	bf28      	it	cs
 800490e:	4632      	movcs	r2, r6
 8004910:	f7ff ffca 	bl	80048a8 <memcpy>
 8004914:	4621      	mov	r1, r4
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fbbe 	bl	8004098 <_free_r>
 800491c:	463c      	mov	r4, r7
 800491e:	e7e0      	b.n	80048e2 <_realloc_r+0x1e>

08004920 <_malloc_usable_size_r>:
 8004920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004924:	1f18      	subs	r0, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfbc      	itt	lt
 800492a:	580b      	ldrlt	r3, [r1, r0]
 800492c:	18c0      	addlt	r0, r0, r3
 800492e:	4770      	bx	lr

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
